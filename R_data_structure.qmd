# 資料結構

在試算表(LibreOffice scalc 或 Excel)中，輸入的資料並不需要考慮其[資料結構(data structure)](https://en.wikipedia.org/wiki/Data_structure)，什麼是「資料結構」呢？簡單來說就是電腦儲存資料並有效率使用資料的方式，
但 R 裡頭考量到資料處理的特性，有向量(vector)、資料框架(Data Frame)、矩陣(matrix)等不同的資料結構，本節將介紹這幾類不同的資料結構以及如何使用。我們可以使用下圖大致上來了解向量、矩陣和資料框架的不同。向量的資料只有一個維度，矩陣和資料框架都是兩個維度。只不過矩陣只能儲存一種資料類型，而資料框架則是可以儲存多種類型。可參見下圖來了解：


![](https://i.imgur.com/L3m2gF1.png)

另外還有像是陣列(array)和列表(list)等資料結構。陣列和列表都是三維的，但列表內可同時包含相同類型或不同類型的資料，例如可同時含括向量、矩陣和資料框架等。


### 向量(Vector)

假設有一些資料的數值，我們想把它們聚合(concatenate)在一起，R 可以使用 ``c()`` 來把資料聚合成「向量(vector)」的形式，例如:

```{r, `code-line-numbers`="3"}
x <- c(1,3,5,7,9)
x
# 此時可以使用 length() 來計算此 x 向量的長度
length(x)
```
在提及其他類型的資料結構之前，儲存資料除了數字、文字之外，還有一類型比較特別的資料類型是類別(factor)，以下簡單介紹類別的定義與特性

### 類別(factor)

類別(factor)可分為名義類別(nominal)或是順序類別(ordinal)。名義類別的資料像是交通號誌中的紅綠燈，不同顏色分別代表不同的意義；而順序類別資料則是會有「順序」的差別，縱使用數字來代表其本身並無數值上的意義，舉例來說，在植群生態調查資料中，Braun-Blanquet 法把不同覆蓋度的估值轉換成 +, r, 1, 2, ... 等不同等級，雖然有些類別是整數，在統計分析的時候整數和類別計算出來的結果不相同。

R 裡頭不管是名義類別或是順序類別都是使用 ``factor()`` 來建立，例如：

```{r, `code-line-numbers`="3"}
factor(c(1,2,3,4,3,2,1))
```

你也可以使用文字來建立類別，例如：

```{r, `code-line-numbers`="3"}
factor(c('a', 'b', 'c', 'e', 'a'))
```

如果你要建立有等級的類別時，可搭配使用 ``order=TRUE`` 參數：

比如說地形我們分成稜線(ridge)、上坡(upper slope)、下坡(lower slope)以及谷地(valley)，依照地勢高低順序來做區別，就能夠這麼做：

```{r, `code-line-numbers`="3"}
# 先建立一個向量 a
a <- c('ridge','upper slope', 'lower slope', 'valley')
# 再使用 factor
topo <- factor(a, ordered = TRUE,
       levels = c('valley', 'lower slope', 'upper slope', 'ridge'))
topo
```

### 資料框架(Data Frame)

R 裡頭預設而且最常使用的資料結構是「資料框架」，你可以使用 ``data.frame()``
建立一個資料框架，例如：

```{r, `code-line-numbers`="3"}
x <- c(1,3,5,7,9)
x.df <- data.frame(x)
x.df
```

在顯示資料框架時，每直行(欄; column)最上方會有欄位名稱，而橫列則預設會有數字序列(1, 2, 3, ... , n)代表列的索引。

### 矩陣

和資料框架很類似，假設我們有 9 個數字，要設定資料結構為 3x3 的矩陣，可以使``matrix()``：

```{r, `code-line-numbers`="3"}
x <- c(1,3,5,7,9,11,13,15,17)
matrix(x, nrow = 3, ncol = 3, byrow = TRUE)
```

需要注意的是，如果你希望這九個數字的順序分別是依照列(row)來排列的話，請記得參數要加上 ``byrow = TRUE``，反之依照欄(column)排列的話，則使用 ``byrow = FALSE`` (預設是 by column)。

```{r, `code-line-numbers`="3"}
matrix(x, nrow = 3, ncol = 3, byrow = FALSE)
```

### 列表(list)

前述的向量是一維的資料，而矩陣和資料框架則是二維的資料，而列表則可以是三維的資料。建立一個列表可使用 ``list()``，在下面的例子中，我們使用 ``sample()`` 
隨機建立兩個 3x3 的矩陣，分別指定為 x 及 y，並把他用``list()`` 合併起來：

```{r, `code-line-numbers`="3"}
# 使用 sample() 建立隨機的正整數
x <- matrix(sample(9), nrow=3)
y <- matrix(sample(9), nrow=3)
list_xy <- list(x, y)
list_xy
```

當看 list_xy 這個列表時，原本的 x 上方有 ``[[1]]``，y 上方則有 ``[[2]]`` 來註記，這個是列表的編號。因此你可以使用 ``list_xy[[1]]`` 來取得編號 1 的矩陣資料。

### 判斷及轉換不同的資料結構

判斷資料結構時，只要把資料結構的名稱前加上 ``is.`` 即可，例如：

```{r, `code-line-numbers`="3"}
is.vector(x)
is.data.frame(x)
```

轉換資料結構也只需使用 ``as.資料結構名稱``，例如：

```{r, `code-line-numbers`="3"}
x <- c(1,3,5,7,9)
as.data.frame(x)
```

### 資料結構的索引

設定成資料框架或矩陣的好處就是你可以用 subscript 的方式來列出資料，
在 R 裡頭通常使用中括號(``[列數, 行數]``)來表示，例如列出第三列第五行

```{r, `code-line-numbers`="3"}
# 隨機產生 50 個整數，使用 sample() 函式
x <- sample(50)
x.m <- matrix(x, nrow = 10)
x.df <- data.frame(x.m)
x.m
```
```{r}
x.m[3,5]
```

如果僅要列出某特定「列」或特定「行」，可以使用:

```{r, `code-line-numbers`="3"}
# 列出第三列
x.m[3,]
# 列出第三行
x.m[,3]
```

另一個 R 強大的功能就是你可以指定特定列數、行數外，
還可以做邏輯判斷和數學運算，例如我們把第三列取 log 值：

```{r, `code-line-numbers`="3"}
log10(x.m[3,])
```

或是條件篩選，把第三列中大於 30 的數字選出來

```{r, `code-line-numbers`="3"}
x.m[3,] > 30
```

你會發現它只會顯示邏輯判斷，即 True 或 False，若要顯示大於 30 的數字呢？

```{r, `code-line-numbers`="3"}
x.m[3, x.m[3,]>30]
```

[作業](https://hackmd.io/toYS6t6BTAOFivs1mrnVGg)
