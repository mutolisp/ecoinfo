[
  {
    "objectID": "R_database.html",
    "href": "R_database.html",
    "title": "14  讓 Rstudio 支援資料庫",
    "section": "",
    "text": "為了要在 RStudio 中能連接並使用資料庫系統，請安裝以下表 1.1 和表1.2 所需程式。建議安裝的流程如下：\n\n安裝 R 語言\n安裝 RStudio\n安裝 RPostgres, DBI 還有 odbc 等套件\n安裝 PostgreSQL\n安裝 pgAdmin\n安裝 psqlODBC\n\n表1.1 在 RStudio 使用資料庫所需要的程式\n\n\n\n\n\n\n\n\n\n\n名稱\n必要性\n說明\n網址\n授權\n\n\n\n\nR\n必須安裝\nR 語言\nhttps://www.r-project.org\nGNU General Public License v2/v3 可免費自由使用、複製、修改\n\n\nRStudio\n必須安裝\nR 的整合性開發環境(Integrated Desktop Environment; IDE)\nhttps://rstudio.com\n商業軟體授權，但是具有開源授權。社群版可免費使用，商業使用需付費\n\n\nPostgreSQL\n必須安裝\n關聯式資料庫管理系統(relational database management system)\nhttps://postgresql.org\nPostgreSQL license (免費，類似 BSD 或 MIT 的授權，可以自由使用、複製、修改甚至使用於商業用途)\n\n\npsqlODBC\n必須安裝\nPostgreSQL ODBC (Open Database Connectivity)\nhttps://odbc.postgresql.org\nLGPL (Library General Public License)\n\n\npgAdmin\n選擇性安裝，強烈建議安裝\n管理 PostgreSQL 的前端工具\nhttps://www.pgadmin.org\nPostgreSQL license (免費)\n\n\npgcli\n選擇性安裝，推薦安裝\nPython 寫的 PostgreSQL 命令列介面\nhttps://www.pgcli.com\nBSD 3-Clause license (免費)\n\n\n\n表1.2 R 所需要之套件\n\n\n\n\n\n\n\n\nR 套件\n說明\n網址\n\n\n\n\nodbc\nR ODBC 開放資料庫連結套件\nhttps://cran.r-project.org/web/packages/odbc/index.html\n\n\nDBI\nR 資料庫介面(database interface)\nhttps://cran.r-project.org/web/packages/DBI/index.html\n\n\nRPostgres\nRcpp 的 PostgreSQL 介面套件\nhttps://cran.r-project.org/web/packages/RPostgres/index.html\n\n\n\n\n\n\n\n\n可至 EnterpriseDB 下載安裝\n\n\n\n請先安裝 Homebrew 套件管理系統，再透過 brew 來安裝以下的軟體\n$ brew install postgresql unixodbc psqlodbc\n\n\n\nDocker 是一個虛擬化的軟體平台，可快速地安裝、測試與佈署應用程式。Docker 核心是 GNU/Linux，因此在許多 Linux 作業系統中都有內建。 這裡指的虛擬化(virtualization)是在作業系統層上進行，和一般人熟知的虛擬機器(virtual machine)不同。Docker 是透過「容器(container)」來實作虛擬化，而這個「容器」和早期於 Unix 作業系統上的 jail (例如 FreeBSD 的 jail)本質是相同的，都是透過 chroot 機制來隔離環境應用程式，像是沙盒(sandbox)一樣。在 jail 沒有漏洞的情況下，不論你在裡頭惡搞都不會影響到外面的作業系統。所以如果你想要測試和玩玩看 RStudio, PostgreSQL，而不是安裝在你平常工作的作業環境中，推薦使用 docker 來安裝。目前大部分常用的自由軟體或開源軟體都有支援 docker，對 docker 有興趣的可以讀這篇 docker 的基礎教學 。使用 docker 之前請先安裝 docker/docker desktop\n$ docker pull postgres\n# 或是使用 tag 來拉取您要安裝的版本\n# https://hub.docker.com/_/postgres?tab=tags\n# 例如：\n$ docker pull postgres:14.1\n\n$ docker run --name 容器名稱(例如postgres) -e POSTGRES_PASSWORD=密碼 -d postgres\n\n# 其餘設定請參閱 docker 網站\n至於類 Unix 系統，像是 *BSD, GNU/Linux 的使用者，我想你們應該不需要再多說明了吧？\n使用 Docker 安裝 R 和 RStudio (待研究)"
  },
  {
    "objectID": "R_database.html#設定",
    "href": "R_database.html#設定",
    "title": "14  讓 Rstudio 支援資料庫",
    "section": "2 2. 設定",
    "text": "2 2. 設定\n\n2.1 設定 odbc\n如果是在類 Unix 系統(包含 Mac)，請在家目錄下(/Users/yourAccountName) 建立 .odbcinst.ini 和 .odbc.ini\n.odbcinst.ini\n[PostgreSQL Driver]\nDriver          = /opt/homebrew/lib/psqlodbcw.so\n註：如果 MacOS 使用 homebrew，ODBC 驅動程式預設位置在 /opt/homebrew/lib 底下，其餘的作業系統可能在 /usr/local/lib 底下，請再查閱作業系統的使用手冊\n.odbc.ini\n[databaseName]\nDriver              = PostgreSQL Driver\nDatabase            = 資料庫的名稱\nServername          = localhost\nUserName            = 你的帳號\nPassword            = 你的密碼\nPort                = 5432\n\n[ecoinformatics]\nDriver              = PostgreSQL Driver\nDatabase            = ecoinformatics\nServername          = localhost\nUserName            = *ruser*\nPassword            = *r_dataScience*\nPort                = 5432\n\n\n2.2 設定 PostgreSQL\n連進資料庫\npgcli -d postgres\n建立使用者，並設定密碼與權限\n方法一：使用命令列方式執行\nCREATE USER ruser WITH PASSWORD 'r_dataScience';\nCREATE DATABASE ecoinformatics WITH OWNER = ruser;\n方法二：使用 pgAdmin 建立\n\n開啟 pgAdmin 並連進資料庫後，從 Login/Group Roles 中按滑鼠右鍵：Create > Login/Group Role。\n\n\n\n圖 1: 建立使用者\n\n\n設定權限，讓 ruser 可以登入並建立資料庫，即開啟 “Can login?” 和 “Create databases?”。設定完之後按 Save\n\n\n\n圖 2: 設定 postgres 權限\n\n\n建立資料庫：在左邊選單中的 Databases 按滑鼠右鍵，選擇 “Create” > “Databases..”。輸入資料庫名稱，這邊以 ecoinformatics 為範例，Owner 選擇 ruser。最後按 Save 建立資料庫。"
  },
  {
    "objectID": "R_database.html#在-rstudio-中使用資料庫",
    "href": "R_database.html#在-rstudio-中使用資料庫",
    "title": "14  讓 Rstudio 支援資料庫",
    "section": "3 3. 在 RStudio 中使用資料庫",
    "text": "3 3. 在 RStudio 中使用資料庫\n\n3.1 連接資料庫\n開啟 RStudio 後，在右上方的面板中按 New Connection 來建立資料庫連結(如下)。點選我們建立的 ecoinformatics odbc 設定\n\n\n\n建立一筆與資料庫的連結\n\n\n\n\n\n建立一筆與資料庫的連結\n\n\n建立一筆與資料庫的連結\n點選完 ecoinformatics 之後，會開啟詳細參數的設定(圖3.1.2)，你可以在這裡選擇把參數丟進 R Console 或是新建一個 R Script 把指令丟出去，之後再執行指令建立一筆資料庫連結。透過 DBI 套件去連結的指令如下：\n\nlibrary(DBI)\ncon <- dbConnect(odbc::odbc(), \"ecoinformatics\", timeout = 10)\n\n上面的指令中，[dbConnect()](https://dbi.r-dbi.org/reference/dbconnect) 是 DBI 套件連接資料庫的函式，裡頭的參數需包含資料庫的驅動程式(database driver)。以本例來說，是使用 odbc::odbc() 來連接 PostgreSQL 資料庫，而 “ecoinformatics” 則是我們寫在 odbc.ini 設定檔中的參數名稱；timeout 則是等待連接時間為 10 秒，超過後無法連接則回傳錯誤訊息。\n\n\n\n資料庫連結指令\n\n\n資料庫連結指令\n若成功連接的話，就能夠看到正確顯示範例資料庫 ecoinformatics 的畫面\n\n\n\n成功連接資料庫的畫面\n\n\n\n\n3.2 建立資料表(Table)\n當連進資料庫時，裡頭是空的狀態。所以我們可以透過 DBI 套件的 dbCreateTable() 來新建資料表。以下用 R 內建的 iris 資料集，使用 dbCreateTable(連線的物件, 資料表, R裡頭的資料框架) 來建立一個資料表。\nlibrary(DBI)\n# 建立資料庫連線，目標資料庫為 PostgreSQL 的 ecoinformatics\ncon <- dbConnect(odbc::odbc(), \"ecoinformatics\", timeout = 10)\n# 建立資料表，請注意以下第二個參數要使用 \" (雙引號)\ndbCreateTable(con, \"iris\", iris)\n但這樣的只是單純建立資料表，並不會把資料匯入 iris 資料表中，若要匯入資料，請使用 dbWriteTable()。\n\n\n\n\n\n\n資料庫知識\n\n\n\n一般的關聯式資料庫，儲存資料的單元是資料表(table)，和試算表(spreadsheet)很類似，都是二維的結構，由欄(columns，直向)和列(rows，橫向；又稱做紀錄[records])所組成。對於 LibreOffice Scalc 或 Microsoft Excel 的試算表來說，列是有順序的(也就是由 1, 2, 3, …)，但資料庫中的資料表的列並無一定順序，可以透過 SQL 查詢依照某特定欄位來排序；而欄則是變數(variables)，例如一個圖書館資料庫中，會儲存書目、ISBN、作者，在資料庫管理系統中則會存在欄位中。在建立資料表的時和試算表不同的是，一般的關聯式資料庫中的資料表需要有嚴謹的資料類型(data definition)定義，比如說「書目」儲存的是文字格式，那我們就要告訴資料庫要用哪種類型的文字格式以及所需的儲存資料長度。以 postgres 來說，文字相關的資料類型就有 character (可縮寫為 char)、character varying (縮寫為 varchar) 和 text。這三種的差別在於儲存的文字是否可變長度或固定長度，還有儲存長度若比固定長度短，是否會填充空格等差別。\n在儲存資料表時，通常會用「資料定義語言(data definition language; DDL) 」來定義資料類型、長度、限制(constraints，常見的像是主鍵索引限制[primary key constraint]、外部索引鍵限制[foreign key constraint])、視觀表(view)等。以下是一個簡單的 DDL：\n-- For any line beginning with \"--\" means comment\nCREATE TABLE IF NOT EXISTS iris (\n    \"Sepal.Length\" double precision,\n    \"Sepal.Width\" double precision,\n    \"Petal.Length\" double precision,\n    \"Petal.Width\" double precision,\n    \"Species\" varchar\n);\n上面這個 DDL 中，用白話翻譯就是：如果資料表 iris 不存在的話，就建立一個資料表；此資料表中有五個欄位，分別是 “Sepal.Length” (資料類型是雙精確數[double precision]，簡單說就是小數)、 “Sepal.Width”(雙精確數)、”Petal.Length” (雙精確數)、”Petal.Width” (雙精確數)和 “Species” (可變長度的文字)。這樣的語法我們也稱作「結構化查詢語言(structural query language; SQL)」，詳細 SQL 介紹請參見\n[結構化查詢語言]\n\n\n\n\n3.3 查詢資料表\n在這個章節中，我們將練習使用 rgbif 來擷取 GBIF 網站上的資料集，並存進 PostgreSQL 的資料庫中，最後再透過 dbGetQuery() 來查詢資料。 請先安裝好 rgbif, leaflet 和 tidyverse 這三個套件\nrgbif 可以使用 occ_search() 來搜尋物種，\n\nlibrary(rgbif)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.5     ✔ purrr   0.3.4\n✔ tibble  3.1.7     ✔ dplyr   1.0.8\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(leaflet)\n\n# 使用 occ_search 來搜尋物種\nquery_results <- occ_search(scientificName = 'Abies kawakamii',\n           hasCoordinate = TRUE,\n           limit = 100000)\n\n\n\n3.4 參考資料\n\nhttps://db.rstudio.com/\nhttps://www.postgresql.org/docs/14/tutorial-install.html\nhttps://hub.docker.com/_/postgres"
  },
  {
    "objectID": "R_scientific_name.html",
    "href": "R_scientific_name.html",
    "title": "13  學名資料處理",
    "section": "",
    "text": "在處理生態或生物多樣性資料時，學名往往都會是一個棘手的問題。有些資料集內，用學名加作者；有些則是僅用學名不含作者。這些文字上可以使用正規表示式(regular expression)"
  },
  {
    "objectID": "R_scientific_name.html#使用正規表示式來處理學名",
    "href": "R_scientific_name.html#使用正規表示式來處理學名",
    "title": "13  學名資料處理",
    "section": "1 使用正規表示式來處理學名",
    "text": "1 使用正規表示式來處理學名\n\ntbw"
  },
  {
    "objectID": "R_scientific_name.html#使用-gnparser-來處理學名",
    "href": "R_scientific_name.html#使用-gnparser-來處理學名",
    "title": "13  學名資料處理",
    "section": "2 使用 GNParser 來處理學名",
    "text": "2 使用 GNParser 來處理學名\nGNParser 是 Global Names Architecture (GNA)底下的一個專案。GNA 主要的目的是提供處理生物物種線上資訊服務，除了建立索引、檢核學名，也能在文件中查找學名。而 GNParser 能夠把複雜的學名拆解成許多元件，例如：\n案例：把學名去除掉命名者\n鹽膚木的學名為 Rhus javanica L. 作者為林奈(L.)，若要去掉命名者則是把 javanica 後面全部刪除就行了。\n但若是有種以下位階者，例如羅氏鹽膚木\nRhus javanica L. var. roxburghii (DC.) Rehd. & E.H. Wilson\n其中 (DC.) Rehd. & E.H. Wilson 為此變種學名的作者，若要全部移除作者，就要把 L. (基本異名[basionym]的作者)\n\n2.1 安裝\n請至 https://gitlab.com/gogna/gnparser/-/releases 下載安裝。安裝很簡單，若您是 Windows 的使用者，只需要把檔案下載完(參考下圖)之後解壓縮至 C:Files 裡頭就行了。若是放在其他路徑則需要在環境變數中設定路徑(可參考此教學)。\n\n\n\n2.2 使用\nGNParser 可以使用指令和網頁介面來操作，如果打算透過 R 來呼叫 GNParser 的話，可以先學習指令的操作。若您使用 Windows 作業系統，可以執行命令提示字元(cmd)，在裡頭輸入指令；若您使用類 Unix 作業系統(*BSD, MacOS, GNU/Linux 等)，可以使用終端機(Terminal)來輸入。一般來說，Windows 的使用者會在 gnparser 後方加上 .exe。例如gnparser.exe ... #### 1. 基本的指令操作\ngnparser \"Scientific name Author\"\n\n[Windows 使用者限定]若您找不到 gnparser (or gnparser.exe)，可能是您的環境變數未加上正確路徑，可以輸入絕對路徑來執行，例如：\nC:\\Program Files\\gnparser\\gnparser.exe \"Scientific name Author\"\n\n舉例來說，若要處理 Rhus javanica L. 就直接輸入：\ngnparser -f pretty \"Rhus javanica L.\"\n就會把此學名解析成以下的結果：\n{\n  \"parsed\": true,\n  \"quality\": 1,\n  \"verbatim\": \"Rhus javanica L.\",\n  \"normalized\": \"Rhus javanica L.\",\n  \"canonicalName\": {\n    \"simple\": \"Rhus javanica\",\n    \"full\": \"Rhus javanica\"\n  },\n  \"details\": [\n    {\n      \"genus\": {\n        \"value\": \"Rhus\"\n      },\n      \"specificEpithet\": {\n        \"value\": \"javanica\",\n        \"authorship\": {\n          \"value\": \"L.\",\n          \"basionymAuthorship\": {\n            \"authors\": [\n              \"L.\"\n            ]\n          }\n        }\n      }\n    }\n  ],\n  \"positions\": [\n    [\"genus\",0,4],\n    [\"specificEpithet\",5,13],\n    [\"authorWord\",14,16]\n  ],\n  \"surrogate\": false,\n  \"virus\": false,\n  \"hybrid\": false,\n  \"bacteria\": false,\n  \"nameStringId\": \"b74019b9-5b07-57e5-bdc4-e9cc4bfaf75b\",\n  \"parserVersion\": \"v0.9.0\"\n}\n\n看起來很複雜，實際上這個是 json 的格式，也就是輕量化的資料交換格式。簡單來說，json 的語法是 key:attribute (關鍵字：數值/屬性)。以上面的例子來說，其中的 \"verbatim\":\"Rhus javanica L.\" 代表原始輸入學名(verbatim)，以及其值(Rhus javanica L.)。一般來說 json 比較適合用機器來讀，如果單純想要解析學名以 csv 格式，不要使用 json 輸出，可以加上參數-f simple，例如：\ngnparser -f simple \"Rhus javanica L.\"\ngnparser 就會以 csv 的形式輸出(windows 上面用逗號分隔，在 MacOS 上則用|分隔)，結果如下：\nb74019b9-5b07-57e5-bdc4-e9cc4bfaf75b|Rhus javanica L.|Rhus javanica|Rhus javanica|L.||1\n各欄位定義分別為 nameStringId(名稱的 id), verbatim(原始學名), simple(簡單學名不含作者、不含種下階層名，例如 var./subsp./f., etc), full(學名不含作者，包含種下階層名稱), authorship(作者), year，最後一個則是 quality。\n其中 quality 代表的意義如下\n\n\n\nquality 數值\n定義\n\n\n\n\n1\n未偵測到任何學名問題\n\n\n2\n偵測到小問題，但正規化的結果仍然良好\n\n\n3\n學名有嚴重的問題，結果令人存疑\n\n\n0\n字串無法辨識為學名，而且解析失敗\n\n\n\n\n2.2.1 2. 批次操作\nGNParser 也支援批次操作，可一次處理多筆學名，例如：\ngnparser -f simple names.txt\n亦可配合重新導向存成另外一個檔名\ngnparser -f simple names.txt > names_parsed.txt\n您可以下載範例資料後來練習。\n\n\n2.2.2 3. 和 R 整合\n您也可以在 R 之中呼叫 GNParser，例如：\n# 載入 data.table\nlibrary(data.table)\n# 透過 system() 來呼叫 gnparser\n# 如果出現錯誤，可能是路徑沒設定正確。\n# 可使用絕對路徑，例如 C:\\bin\\gnparser.exe -f simple ...\nsystem(\"gnparser -f simple names.txt > names_parsed.txt\")\nparsed <- fread(\"names_parsed.txt\")    \n若您想透過 json 的方式來解析，也可以安裝 jsonlite 套件來處理，例如：\n{.r, code-line-numbers=\"3\"} library(jsonlite) # 僅輸出不含作者的完整學名 jsonlite::fromJSON(names_parsed[1])$canonicalName$full"
  },
  {
    "objectID": "R_arithmetic.html",
    "href": "R_arithmetic.html",
    "title": "4  數學運算及邏輯判斷",
    "section": "",
    "text": "加減乘除代表的運算符號分別為 +, -, *, /。\n\n例：5 + 5\n\n\n5 + 5\n\n[1] 10\n\n\n\n例: 3 - 5\n\n\n3-5\n\n[1] -2\n\n\n\n例: 5 ** 2\n\n\n5 ** 2\n\n[1] 25\n\n\n下表整理 R 所支援的常見的數學運算子(arithmetic operators)\n\n\n\n運算子\n說明\n範例\n\n\n\n\n+\n加\n3 + 3\n\n\n-\n減\n5 - 1\n\n\n*\n乘\n2 * 2\n\n\n/\n除\n2 / 3\n\n\n^ 或 **\n指數\n5 ** 2\n\n\nx %% y\nx 除 y 的餘數\n5 %% 3\n\n\nx %/% y\nx 除 y 的商數\n13 %/% 2\n\n\n\n另外像是 \\(\\pi\\)、對數、加總等則是使用函式的方式，例如\n\n# pi 是常數\npi\n\n[1] 3.141593\n\n\n對數計算(logarithm)：\n\n# 以 10 為底\nlog10(10)\n\n[1] 1\n\n# natural log\nlog(10)\n\n[1] 2.302585\n\n\n指數(exponential):\n\nexp(10)\n\n[1] 22026.47\n\n\n加總(summation):\n\nsum(1,3,5,7,9)\n\n[1] 25\n\n\n極值(maximum or minimum values)，可使用 max() 及 min() 來分別計算最大值及最小值:\n\nx <- c(3, 5, 7, 1, 4, 2)\nmax(x)\n\n[1] 7\n\n\n\nx <- c(3, 5, 7, 1, 4, 2)\nmin(x)\n\n[1] 1\n\n\n平均數(mean):\n\nx <- c(3, 5, 7, 1, 4, 2)\nmean(x)\n\n[1] 3.666667\n\n\n標準差(standard deviation):\n\nx <- c(3, 5, 7, 1, 4, 2)\nsd(x)\n\n[1] 2.160247\n\n\n開根號(square root):\n\nsqrt(10)\n\n[1] 3.162278\n\n\n你可能會發現上面的例子數字都只有七個位數，這是 R 裡頭預設的顯示位數，如果你想增加顯示的位數的話，可以使用 option() 來設定，\n\n# 設定 10 位數字\noptions(digits = 10)\npi\n\n[1] 3.141592654\n\n\n\n# 設定 20 位數字\noptions(digits = 20)\npi\n\n[1] 3.141592653589793116\n\n\n\n\n假設 A, B 兩個為 \\(3 \\times 3\\) 的矩陣要相乘，這兩個矩陣分別是 A 與 B，要怎麼計算呢？\n\\[\n\\mathbf{A}~=~\\left[\n\\begin{array}{ccc}\n1 & 4 & 2 \\\\\n3 & 2 & 3 \\\\\n2 & 3 & 1\n\\end{array}\\right]_{~3\\times3},~\\mathbf{B}~=~\n\\left[\\begin{array}{ccc}\n2 & 4 & 1 \\\\\n1 & 1 & 2 \\\\\n3 & 5 & 2\n\\end{array}\\right]_{~3\\times3}\n\\]\n如果是矩陣的相乘，即積(dot)，是 %*%，而 * 則是元素之間的相乘(即 \\(A_{ij}\\times B_{ij}\\))，做法如下：\n\n# 在 R 內產生矩陣的方式為 matrix(data, nrow, ncol)\n# data 是這個矩陣的數值, nrow 表示有幾列, ncol 是幾欄\n# 預設會從第一欄第一列依序照欄排列數字，如果要按照列排列數字，\n# 則參數為 byrow=T}\nA <- matrix(c(1,3,2,4,2,3,2,3,1),3,3)\nB <- matrix(c(2,1,3,4,1,5,1,2,2),3,3)\n# A dot B\nA%*%B\n\n     [,1] [,2] [,3]\n[1,]   12   18   13\n[2,]   17   29   13\n[3,]   10   16   10\n\n\n\n# A 乘 B (元素相乘)\nA*B\n\n     [,1] [,2] [,3]\n[1,]    2   16    2\n[2,]    3    2    6\n[3,]    6   15    2\n\n\n而矩陣的轉置(transpose)則是使用 t():\n\nA <- matrix(c(1,3,2,4,2,3,2,3,1),3,3)\nA\n\n     [,1] [,2] [,3]\n[1,]    1    4    2\n[2,]    3    2    3\n[3,]    2    3    1\n\n# 轉置矩陣\nt(A)\n\n     [,1] [,2] [,3]\n[1,]    1    3    2\n[2,]    4    2    3\n[3,]    2    3    1\n\n\n以上簡單介紹數學計算，進階的數學運算語法可使用 ?plotmath 查詢。\n\n\n\n\n除了數學運算外，在 R 裡頭該如何進行邏輯判斷呢？例如 A > B 這樣的計算，該怎麼表示呢？下表為 R 中所支援的邏輯判斷\n\n\n\n邏輯判斷\n說明\n\n\n\n\n>\n大於\n\n\n<\n小於\n\n\n>=\n大於等於\n\n\n<=\n小於等於\n\n\n==\n相等\n\n\n!=\n不相等\n\n\n!a\n不等於a\n\n\na | b\na或b\n\n\na & b\na而且b\n\n\n\n邏輯判斷的結果則是真(TRUE)、偽(FALSE)及 NA (not available)，例如：\n\n5 > 3\n\n[1] TRUE\n\n3 != 3\n\n[1] FALSE\n\n3 == 3\n\n[1] TRUE\n\n3 <= 3\n\n[1] TRUE"
  },
  {
    "objectID": "R_arithmetic.html#練習",
    "href": "R_arithmetic.html#練習",
    "title": "4  數學運算及邏輯判斷",
    "section": "2 練習",
    "text": "2 練習\n假設 P 為以下的數列\n\\[ P = c(3,5,7,1,8,9,2,1,5,4)\\]\n請計算下列公式的值:\n\\[-\\sum_{i=1}^{10} P_i * ln (P_i)\\]"
  },
  {
    "objectID": "R_arithmetic.html#作業-1",
    "href": "R_arithmetic.html#作業-1",
    "title": "4  數學運算及邏輯判斷",
    "section": "3 作業 1",
    "text": "3 作業 1\n\n請計算 314/103 與 256/538 的餘數\n請計算 \\(log_{10} 235\\) 及 \\(ln 555\\)\n請查出標準差的公式，並用 R 計算下列數列的標準差： \\(3,10,5,1,2,9,56,38,-5\\)\n請計算下列數列的總和 \\(28,16,21,30,1,19,20,11,5,4,\\)\n\\(9,3,18,10,22,25,23,15,24,2,\\) \\(26,8,29,17,7,13,27,6,12,14\\)\n請計算下列兩個矩陣 \\(A, B\\) 的 (1) 乘積以及 (2) 元素之間的相乘\n\n\\[\n\\mathbf{A}~=~\\left[\n\\begin{array}{ccc}\n1 & 4 & 2 & 5 \\\\\n3 & 2 & -3 & 3 \\\\\n2 & 3 & 1 & 13 \\\\\n8 & 0 & 1 & -3\n\\end{array}\\right]_{~4\\times4},~\\mathbf{B}~=~\n\\left[\\begin{array}{ccc}\n21 & 3 & 8 & 6\\\\\n10 & 5 & 2 & 8 \\\\\n3 & 5 & 2 & 1 \\\\\n4 & 9 & 0 & -5\n\\end{array}\\right]_{~4\\times4}\n\\]\n\n請問什麼是費布納西數列(Fibonacci sequence; \\(F\\))? 請計算並列出 1–20 個費布納西數(\\(F_1, F_2, F_3, \\dots, F_{20}\\))\n下表為兩個樣區的物種組成，請計算 (1) DG01 和 DG02 的 Shannon Diversity Index (2) 兩個樣區的 Jaccard Similarity Index :::info hint:\n\n\\[- \\sum_{i=1}^{n} P_i * ln(P_i)\\] 其中 \\(P_i = n_i/N\\)，\\(n_i\\) 為該物種的株數，\\(N\\) 為所有物種總數\n\\[J(A,B) = \\frac{|A \\cap B|}{|A \\cup B|}\\] :::\n\n\n\n\n樣區id\n物種\n株數\n\n\n\n\nDG01\n印度牛膝\n5\n\n\nDG01\n大花咸豐草\n15\n\n\nDG01\n烏面馬\n1\n\n\nDG01\n短穎馬唐\n2\n\n\nDG01\n綠珊瑚\n1\n\n\nDG01\n酢漿草\n10\n\n\nDG01\n野莧菜\n3\n\n\nDG01\n銀合歡\n20\n\n\nDG01\n馬櫻丹\n12\n\n\nDG01\n龍爪茅\n7\n\n\nDG01\n龍葵\n3\n\n\nDG02\n光果黃細心\n1\n\n\nDG02\n台灣灰毛豆\n5\n\n\nDG02\n土丁桂\n6\n\n\nDG02\n大花咸豐草\n19\n\n\nDG02\n大飛揚草\n14\n\n\nDG02\n孟仁草\n13\n\n\nDG02\n毛馬齒莧\n12\n\n\nDG02\n煉莢豆\n10\n\n\nDG02\n獨行菜\n5\n\n\nDG02\n白花牽牛\n3\n\n\nDG02\n紅花黃細心\n6\n\n\nDG02\n臭濱芥\n7\n\n\nDG02\n草梧桐\n9\n\n\nDG02\n酢漿草\n10\n\n\nDG02\n雙花草\n11\n\n\nDG02\n雞觴刺\n12\n\n\nDG02\n香茹\n1\n\n\nDG02\n香附子\n1\n\n\nDG02\n鬼針\n1"
  },
  {
    "objectID": "R_arithmetic.html#上課練習的-r-script",
    "href": "R_arithmetic.html#上課練習的-r-script",
    "title": "4  數學運算及邏輯判斷",
    "section": "4 上課練習的 R script",
    "text": "4 上課練習的 R script\n2017-10-19 上課練習 R Script（點選此連結可下載）\n## 數學計算\n# 餘數和商的練習\na <- 131 %% 68\nb <- 131 %/% 68\n# 常數：圓周率(內建)\npi\n\nlog10(2)\nlog(10)\nlog2(10)\nexp(5)\n# 最大最小值，使用 max, min\nmax(3,1,8,7,6)\nmin(3,1,8,7,6)\n# 計算平均數，使用 3,1,8,7,6 這個數列，用 c() 儲存成\n# R 的 vector 形式\nvect1 <-  c(3,1,8,7,6)\nmean(vect1)\n\n# 調整小數顯示位數，預設是 7 位（包含小數點以上的數值）\n# 3.141592653 --> 顯示為 ---> 3.141593\n# 最大值 22\noptions(digits = 22)\n\n# 矩陣運算\nA <- matrix(c(1,3,2,4,2,3,2,3,1),3,3)\nB <- matrix(c(2,1,3,4,1,5,1,2,2),3,3)\n# 相乘積\nA %*% B\n# 元素之間相乘\nA * B\n\n# 練習\n# 方法 1\nP <- c(3,5,7,1,8,9,2,1,5,4)\np1 <- P[1]*log(P[1])\np2 <- P[2]*log(P[2])\np3 <- P[3]*log(P[3])\np4 <- P[4]*log(P[4])\np5 <- P[5]*log(P[5])\np6 <- P[6]*log(P[6])\np7 <- P[7]*log(P[7])\np8 <- P[8]*log(P[8])\np9 <- P[9]*log(P[9])\np10 <- P[10]*log(P[10])\nsum(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10)\n## 方法二，使用 data.table\n## 請先在 packages 裡安裝 data.table\nlibrary(data.table)\n# 將 P 數列存成 data.table 格式\nP.dt <- data.table(P)\n# 新增一個欄位 n，其值為 P * log(P)\nP.dt[, n := P*log(P)]\n# 最後再加總起來\nsum(P.dt[, n])\n\n# 邏輯判斷\n3 == 5\na <- 3\nb <-  5\ns1 <- c(1,3,5,7,1,3,5,5,9,8)\n# factor 加總是沒有意義的\nsum(factor(s1))\n\n# 把兩個向量用 cbind (column bind) 組合起來\ns2 <- cbind(s1, P)\n# 看 s2 的長度(length)和維度(dim=dimension)\nlength(s2)\ndim(s2)\n\n# 資料結構: list\ncontainer <- list(s1,s2,P)\ncontainer[['Hollyshit']] <- c('ha', 'ha')\ny <-  1:10\nx <- sample(50)\nx.m <- matrix(x, nrow = 10)\n\n# 篩選資料，可以使用 [] subscription (中括號)\n# 來表示：A[i,j] 代表 A data.frame 中的第 i 列，第 j 欄\n# A[, j] 代表第 j 欄(整欄)\n# A[i, ] 代表第 j 欄(整欄)\n\n# 練習：\n# 把第一欄小於 10 的數值找出來\n# 1. 先列出第一欄\nx.m[, 1] \n# 2. 再加上邏輯判斷，得到的結果為 True/False\nx.m[, 1] < 10\n# 再使用 subscription 組合起來\nx.m[, 1][x.m[, 1] < 10]"
  },
  {
    "objectID": "R_basic.html",
    "href": "R_basic.html",
    "title": "3  基本操作",
    "section": "",
    "text": "圖 2-1、R console (這裡以 RStudio 為例)\n圖 2-1 是使用 RStudio 開啟 R console。上半部顯示 R 的版本、平台(platform)、版權的宣告及相關資訊等。最下面有個大於(>)符號，後方游標閃爍，在這個「大於」符號後面是接受輸入命令區，你可以在這邊輸入 R 的指令。\n在解釋 R console 使用之前，先解釋電腦程式語言的兩大類群，分別為編譯式語言(compiled language)及直譯式語言(interpreted language)。編譯式語言需要透過編譯器(compiler) 把程式碼翻譯成機器能懂得二進位碼，而直譯式語言則直接在直譯器中輸入程式碼即可。R 語言就是一種直譯式的語言，只要把指令輸入在 R console 中，R 就會直接執行不需要額外再透過編譯器。\n在 R console 中，隨時都可以接受指令的輸入，原則上 R 會一行一行的執行，你可以把這裡當成計算機，例如你可以試著輸入 \\[ 3 \\times 128 \\] (相乘使用 「*」符號，數學運算的部分後面的章節會再詳細解釋)。\nR > 3*128 [1] 384\n第二個例子是 5 除以 3：\nR > 5 / 3 [1] 1.666667\n眼尖的你可能會發現到上面的第一個例子沒有空格，第二個例子有空格。 在 R 裡面運算符號和數值之間的空格不會影響到執行的結果， 但我建議你可以在數值和運算符號中保留空格， 這可以讓閱讀 R 程式碼時更加舒適且美觀。\n\n0.1 註解\n在撰寫 R 語言時，只要開頭有井字號(#)的 R 都會把它視為註解。 因此不論後面再加上什麼指令或函式，R 都會把這些當成註解不執行， 例如：\nR # 這是註解 #### 這也是註解\n如果你有多行文字需要註解，在 RStudio 中，你可以把這幾行選取起來，在選單 Code 中的 Comment/Uncomment Lines 把這幾行註解起來。或是使用快速鍵 Shift-Ctrl-C (MacOS 則是 Shift-Command-C)註解。而註解有何用處呢？就是能夠把 R 程式中額外需要解釋的，像是某功能代表什麼意思？各個參數的限制，有沒有什麼其他值得給自己或他人參考的文字內容等。另外註解還有一個很重要的功能就是幫助自己回憶 code，當你花了許多時間寫了許多 R code，過了一段時間可能忘記到底在寫些什麼，這些註解就可以幫助你回憶。比如說下面是一個 R 函式，我就會在函式的前方寫這個函式是在做什麼、輸入資料的類型以及參數解釋等：\n``R ## [FUNCTION] Find countries in focal list and store PolySet in a vector # # arguments: # * ref_area.prj: projected area (SpatialPolygon object) # * focal_list: focal list # find_focal <- function(ref_area.prj, focal_list) { require(PBSmapping) focal_list.ps <- vector(mode=“list”, length=length(focal_list)) for ( i in 1:length(focal_list) ) { # check if the focal_list names match the fieldname in ref_area.prj if ( focal_list[i] %in% ref_area.prj\\(NAME ) {  focal_list.ps[[i]] <- combinePolys(SpatialPolygons2PolySet(ref_area.prj[ref_area.prj\\)NAME==focal_list[i],])) } else { print(paste(“Error!”, focal_list[i],“does not match in the reference area”, sep=” “)) } } return(focal_list.ps) }\n``\n\n\n0.2 使用函式及表示式\nR 裡頭執行指令或是函式(function)時，必須要加上括號，例如 ls()，如果沒有加上括號「()」，R 預設就會把其原始碼在螢幕上印出，例如:\nR > ls function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,     pattern, sorted = TRUE) {     if (!missing(name)) {     ... 中間省略 ...             }         }         grep(pattern, all.names, value = TRUE)     }     else all.names } <bytecode: 0x1039a66e0> <environment: namespace:base>\n若輸入的指令為 ls() 時才會正確去執行該函式，即：\nR > ls() character(0)\n如何自訂函式我們會在後面的自訂函式章節裡頭介紹。\n\n\n0.3 指定變數(variables)\n對於複雜一點的 R 程式，也許你會想有沒有什麼其他的方式可以重複使用計算過的數值、或是執行過的函式呢？舉例來說，我想計算 15 塊錢美金可以換算成多少新臺幣， 假設一塊美金可以換成 31.53 新臺幣，R 可以這樣計算：\nR > 15 * 31.53 [1] 472.95\n但每天的美金兌換新臺幣的匯率都不同，這個時候我們就可以把「匯率」當成一個「變數(variable)」，顧名思義，變數就是會「變」動的「數」值(或文字、函式等)。所以我們用變數的概念來呈現上述的例子：\nR 變數名稱 <- 數值或文字、函式\n其中 <- 代表「指定(assign)」的意思，在 R 的語法中，你也可以使用 = 來代表「指定」變數或函式，但為了不讓初學者和邏輯上的相等(R 使用兩個等號 ==)混淆，在這裡我們建議使用 <- 來代表指定變數。因此計算匯率的語法可以這麼寫：\nR # 把 USDTWD 這個變數指定數值為 31.53 > USDTWD <- 31.53 # 計算 15 塊美金等於多少新臺幣 > 15 * USDTWD [1] 472.95\n另外，當你選擇變數的時候，可能會有數值或文字的差異，在 R 和 Excel 不同的是，R 在處理數值或文字資料時必須先定義好其類型，一般來說 R 的資料分為數值類及文字類這兩大類型。如果是數值類型的資料，使用時直接輸入數字即可，例如：\nR > a_number <- 123.5 > a_numer [1] 123.5 > b_number <- 50 > b_number [1] 50\n若是文字資料，則需要加上引號(’’)或雙引號(““)，例如：\n> character_a <- 'Veni, vici, vidi'\n> character_a\n[1] \"Veni, vici, vidi\"\n> character_b <- \"Hello world!\"\n> character_b\n[1] \"Hello world!\"\n像上面例子的文字資料，通常我們稱字串(string)或是文字(character)。而數值資料則包括整數(integer)、實數(numeric)、雙精確數(double-precision number)、複數(complex)等。另外還有一類特殊的資料類型，在 R 裡頭會使用 NA (Not Available; 不是數值或不存在此物件，通常是缺乏資料) 或 NaN (Not a Number; 不屬於數值)來表示。若數值資料無限大，則是使用 inf 來表示。"
  },
  {
    "objectID": "R_basic_graphics.html",
    "href": "R_basic_graphics.html",
    "title": "15  繪圖",
    "section": "",
    "text": "R 支援基本的繪圖，包括散布圖(distribution plot)、盒鬚圖(boxplot)、直方圖(histogram)甚至是地圖等。若需要進階的繪圖，可安裝 ggplot2 等第三方套件支援。"
  },
  {
    "objectID": "R_basic_graphics.html#基本繪圖",
    "href": "R_basic_graphics.html#基本繪圖",
    "title": "15  繪圖",
    "section": "1 基本繪圖",
    "text": "1 基本繪圖\n我們以下圖一來說明 R 繪圖的基本元件及定義  圖一、R 的基本繪圖\nA: 繪圖區，呈現點、線等圖之處 B: 圖標題(graph title, R 選項:main) C: X 軸(x-axis) D: Y 軸(y-axis) E: X 變數標題 (x label, R 選項: xlab) F: Y 變數標題 (y label, R 選項: ylab)\n\n1.1 盒鬚圖(boxplot)\n# 加載 mtcars 資料集，接下來就可以直接\n# 使用 mtcars 裡頭的變數\n# 未加載 mtcars 要使用 mpg 變數: mtcars$mpg\n# 加載之後只需要使用 mpg\nattach(mtcars)\nboxplot(mpg)\n# 繪製完之後卸載 mtcars\ndetach(mtcars)\n 圖二、盒鬚圖\n\n\n1.2 直方圖(histogram)\nattach(mtcars)\nhist(mpg)\ndetach(mtcars)\n 圖三、直方圖範例\n其他選項： breaks: 直方柱數量(number of bins)，例如 breaks = 10 為繪製 freq: 預設使用出現的頻度，若設定為 FALSE 則會繪製 probability densities\n也可以繪製多個不同變數\nattach(mtcars)\nboxplot(mpg, wt, drat, wt, qsec)\ndetach(mtcars)\n 圖四、多個直方圖合併在同一個圖表中\n使用 ggplot2 來繪圖\n\n\n1.3 散布圖(scatterplot)\nattach(mtcars)\nplot(x = hp, y = mpg, main = 'Scatterplot: HP v.s. MPG')\ndetach(mtcars)\n\n\n\n1.4 細部調整參數\nTBD"
  },
  {
    "objectID": "R_basic_graphics.html#參考資料以及延伸閱讀",
    "href": "R_basic_graphics.html#參考資料以及延伸閱讀",
    "title": "15  繪圖",
    "section": "2 參考資料以及延伸閱讀",
    "text": "2 參考資料以及延伸閱讀\n\nR graphics gallery\nQuick-R graph"
  },
  {
    "objectID": "R_basic_graphics.html#練習",
    "href": "R_basic_graphics.html#練習",
    "title": "15  繪圖",
    "section": "3 練習",
    "text": "3 練習\n登入 datacamp 之後可以自我練習 R 繪圖 https://www.datacamp.com/courses/data-visualization-in-r\n\n3.1 課堂練習 RScript\n#\nhdata <- rnorm(100)\n# draw histogram using hist()\nhist(hdata, axes = FALSE)\naxis(1)\naxis(3)\nbox()\n\n\n### Use examples from Quick-R website\nattach(mtcars)\n# 單純繪圖，由螢幕輸出圖表\n  plot(wt, mpg, type = \"p\", xlab = \"WT (unit)\",\n       ylab=\"MPG (miles)\")\n  # lm 為 linear model (簡單線性回歸)\n  abline(lm(mpg~wt), lwd = 2, lty = 2, \n         col = \"#ff000099\")\n  title(\"Regression of MPG on Weight\")\n\nquartz()\nheat.colors(5)\nterrain.colors(10)\n\n\n3.2 作業\n\n請使用 R 內建的 iris 資料集，嘗試繪出類似下列的盒鬚圖。圖中必須包含標題、x 及 y 軸標籤。\n\n\n請繪製不同物種(欄位 Species，分別有 setosa, versicolor, virginica 三種)和花瓣長度（欄位名稱為 Petal.Length）的盒鬚圖。\n\n\n\n請把這三種物種的盒鬚圖著上不同顏色\n\n\n請繪出 sepal length (x 軸) 和 sepal width (y 軸) 的散佈圖，並把不同物種以不同顏色表示。\n請將以下三張小圖使用 par() 或是 layout 組合成一張圖（共3張小圖）。第一張為 setosa 的花瓣長度及寬度散佈圖，第二張為 versicolor 的萼片長度及寬度散佈圖，第三張為 virginica 的萼片長度及寬度散佈圖"
  },
  {
    "objectID": "R_data_combination.html",
    "href": "R_data_combination.html",
    "title": "10  資料組合",
    "section": "",
    "text": "當處理資料時，有時候會新增刪減欄位、資料，之前我們介紹過 R 簡單的資料結構，並使用 data.frame 來儲存管理資料。一般來說如果單純要在 data.frame 中加上新的欄位，我們可以使用 cbind() (也就是 column bind的意思，把欄位綁在一起)，如下面的範例：\n如果要新增列呢？和 cbind() 很類似，可使用 rbind() 來新增列\n除了這樣新增的方式之外，cbind() 和 rbind() 常常使用於組合兩個不同的 data.frame，我們把 mtcars 拆成兩個子資料集，來練習使用資料的組合。\n同樣的，rbind() 也可以用來組合兩個以上的 data.frame。不過如果你直接使用 rbind(mtcars1, mtcars2)是無法成功的，因為兩個 data.frame 的欄位名稱是不同的。所以在合併多個 data.frame 時，一定要有相同的欄位，以關聯式資料庫(relational database)的術語來說就是要有一組 key (鍵)，這組鍵可以把不同的資料表(data table，在這裡我們指的是兩個或以上的資料集)連結起來，此稱之為 join。在 R 裡頭內建的 merge() 就是一種 join 的方式(即 inner join)，另外還有 left join 以及 right join 等，其示意圖如圖一，假設有兩個 data.frame df1 及 df2，如果 join 的方式要保留 df1 中所有的元素，這稱之為 left join；同樣地如果要保留 df2 所有的元素，則稱為 right join；如果只保留有交集的元素，我們稱之為 inner join。下一節我們將介紹如何使用 merge 來合併資料。\n圖一、不同類型的 join"
  },
  {
    "objectID": "R_data_combination.html#使用-merge-來合併資料",
    "href": "R_data_combination.html#使用-merge-來合併資料",
    "title": "10  資料組合",
    "section": "1 使用 merge 來合併資料",
    "text": "1 使用 merge 來合併資料\n如果你曾經使用過 Excel 或是類似的試算表軟體，有個功能 vlookup 和這裡的 merge 是非常類似的，都可以針對某個相同欄位來合併資料。我們把合併資料的概念圖繪製如下呈現：\n 圖二、針對相同欄位合併的示意圖\n假設有兩個 data.frame ，其中各有一個欄位 X 都是相同的，我們就可以針對 X 把這兩個 data.frame 合併在一起。在 R 裡頭我們可以這樣做：\n\n# 先建立虛擬的 data.frame\n# x,y,z,a,b 都是一維的 vector\nx <- c(1,3,5,7)\ny <- c('a','b','a','c')\nz <- rnorm(4)\na <- sample(4)\nb <- c('F','F','T','T')\n# 使用 cbind 組合起來，再轉成 data.frame 格式\ndf1 <- as.data.frame(cbind(x,y,z))\ndf2 <- as.data.frame(cbind(x,a,b))\n\n在上面的程式碼中我們建立了兩個虛擬的 data.frame：df1 和 df2，最後只要用 merge(df1, df2) 就能把這兩個 data.frame 的資料合併起來。\n\n# 顯示 df1 \ndf1\n\n  x y                  z\n1 1 a -0.494671828420966\n2 3 b -0.407762834826426\n3 5 a   1.00318269095987\n4 7 c  -1.82018850483896\n\n\n\n# 顯示 df2\ndf2\n\n  x a b\n1 1 1 F\n2 3 2 F\n3 5 4 T\n4 7 3 T\n\n\n\n# 合併 df1 和 df2\nmerge(df1, df2)\n\n  x y                  z a b\n1 1 a -0.494671828420966 1 F\n2 3 b -0.407762834826426 2 F\n3 5 a   1.00318269095987 4 T\n4 7 c  -1.82018850483896 3 T"
  },
  {
    "objectID": "R_data_combination.html#進階的-merge-不同的-join-方式",
    "href": "R_data_combination.html#進階的-merge-不同的-join-方式",
    "title": "10  資料組合",
    "section": "2 進階的 merge: 不同的 join 方式",
    "text": "2 進階的 merge: 不同的 join 方式\n前一小節的範例中，df1 和 df2 共有的欄位 x 都有四個相同數值(也就是 1,3,5,7)，可是如果 df1 少了一個數值(假設把第四列移除)，和 df2 合併的時候結果會怎麼樣呢？示意圖請參照圖三\n 圖三、當 df1 沒有 df2 的數值時\n所以如果要保留所有 df2 的 X 欄位，合併完的 Y 欄位和 Z 欄位的 x41 就對應不到 df1 中之數值，所以會留空。以 merge() 來說，預設會使用 inner join，也就是只有 df1 和 df2 交集的資料才會合併在一起：\n\n# 把第四列數值拿掉\ndf1 <- df1[-4,]\n# 如果 df1 或 df2 其中有數值沒有對應到\n# merge 預設會用 inner join (只有交集)\nmerge(df1, df2)\n\n  x y                  z a b\n1 1 a -0.494671828420966 1 F\n2 3 b -0.407762834826426 2 F\n3 5 a   1.00318269095987 4 T\n\n\n如果要實作 left 或 right join 呢？merge() 中只要加上參數 all.x = TRUE 或是 all.y = TRUE 即可，x 指的是第一個提到的 df1， y 則是 df2，也可以直接在 merge() 的參數中指定，例如 merge(x=df1, y=df2)。\n\n# left join\nmerge(df1, df2, all.x = TRUE)\n\n  x y                  z a b\n1 1 a -0.494671828420966 1 F\n2 3 b -0.407762834826426 2 F\n3 5 a   1.00318269095987 4 T\n\n\n\nmerge(df1, df2, all.y = TRUE)\n\n  x    y                  z a b\n1 1    a -0.494671828420966 1 F\n2 3    b -0.407762834826426 2 F\n3 5    a   1.00318269095987 4 T\n4 7 <NA>               <NA> 3 T\n\n\n除了 R 內建 base 的 merge 之外，你也可以嘗試使用 Wickham 寫的 dplyr 套件中的 left_join()、right_join()及inner_join()等功能。在 dplyr 中 join 的使用可參見下表：\n\n\n\n\n\n\n\n指令\n說明\n\n\n\n\ninner_join\njoin 之後會把所有 x 在 y 之中符合的元素抓出來\n\n\nleft_join\n保留所有在 x 之中的元素，如果 x 的數值在 y 之中找不到，就會回傳 NA\n\n\nright_join\n和 left_join 相反，保留所有 y 的元素\n\n\nfull_join\n也就是 x 和 y 的聯集，如果沒有符合的數值，就會回傳 NA\n\n\n\n下方的範例是使用 dplyr 來 join 兩個 data.frame：\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nleft_join(df1, df2)\n\nJoining, by = \"x\"\n\n\n  x y                  z a b\n1 1 a -0.494671828420966 1 F\n2 3 b -0.407762834826426 2 F\n3 5 a   1.00318269095987 4 T\n\n\n結果如下：\nJoining, by = \"x\"\n  x y                  z a b\n1 1 a  -1.52367624427762 4 F\n2 3 b  0.420508839197317 3 F\n3 5 a -0.162735214516669 2 T\n也可以使用 dplyr/magrittr 特殊符號 %>% 來把左邊的執行 code 導向到右邊的，即：\n\ndf1 %>% left_join(df2)\n\nJoining, by = \"x\"\n\n\n  x y                  z a b\n1 1 a -0.494671828420966 1 F\n2 3 b -0.407762834826426 2 F\n3 5 a   1.00318269095987 4 T\n\n# 等同於 left_join(df1, df2)\n\n本節範例 code 下載"
  },
  {
    "objectID": "R_data_combination.html#作業",
    "href": "R_data_combination.html#作業",
    "title": "10  資料組合",
    "section": "3 作業",
    "text": "3 作業\n\n請使用 merge() 來合併 twforest 和 twforest_families 這兩個檔案\n請練習使用 merge() 或是 dplyr::left_join(), dplyr::right_join() 把 twforest_families 和 apgiv_families 合併成下列的格式\n\n\n\nfamily\nfamily_zh\nspecies\n\n\n\n\nPentaphyllaceae\n五列木科\n台灣楊桐\n\n\nAquifoliaceae\n冬青科\n燈稱花\n\n\n…\n…\n…\n\n\n\n並請依照 family 的字母排序`"
  },
  {
    "objectID": "R_data_filtering.html",
    "href": "R_data_filtering.html",
    "title": "11  資料篩選",
    "section": "",
    "text": "當你面對一筆資料的時候，除了基礎的排序外，你可能還會想要篩選資料來進一步了解其樣貌。例如家戶所得的收支報告，你可能會想知道除了平均所得之外，哪一個縣市的收入最高？哪一個鄉鎮市區的收入最低？諸如此類的問題就可以使用 data.table、dplyr 套件或是透過結構化查詢語言(structural query language)來篩選查詢外部的資料庫。"
  },
  {
    "objectID": "R_data_filtering.html#使用-data.table-來篩選資料",
    "href": "R_data_filtering.html#使用-data.table-來篩選資料",
    "title": "11  資料篩選",
    "section": "1 使用 data.table 來篩選資料",
    "text": "1 使用 data.table 來篩選資料\n\n\n\n\n\n\n[注意資訊]\n\n\n\n請先安裝 data.table 套件，可由 RStudio 介面安裝或是手動安裝\n\n\n範例一：使用 mtcars 資料集。篩選第三列至第十列的資料\n解析：和 data.frame 相同用法，DT[m, n]，其中m代表列數，n代表行數。使用 mtcars[3:10, ] 即可篩選出第三列至第十列的資料\n\n# 載入 data.table\nlibrary(data.table)\n# 把\nmtcars.dt <- as.data.table(mtcars)\nmtcars.dt[3:10, ]\n\n    mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n1: 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n2: 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n3: 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n4: 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n5: 14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n6: 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n7: 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n8: 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n\n\n範例二：請篩選出四汽缸(cyl)的車\n解析：我們可以使用 DT[ 欄位名稱 == 4] 來篩選出四汽缸的汽車，在 data.table 中，可以直接使用欄位的名稱，例如 cyl, disp, hp 等欄位名稱，不需要再加上引號。因此在子集合中我們只需要輸入 cyl == 4 即可：\n\nmtcars.dt[ cyl == 4 ]\n\n     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n 1: 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n 2: 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n 3: 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n 4: 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n 5: 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n 6: 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n 7: 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n 8: 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n 9: 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n10: 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n11: 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\n範例三：請篩選初四汽缸的車中，每加崙可行駛的里程(mpg)平均\n解析：我們可以使用子集合的方式先把四汽缸的車篩選出來，再計算其平均，即 mtcars.dt[ cyl == 4][, mean(mpg)]，其計算結果為 26.66364\n範例四：請計算不同汽缸數車輛之個別行駛里程平均數\n解析：可使用上述範例中的方式一一計算，或是使用 data.table 中的 DT[m, n, by=特定欄位]來計算：\n\nmtcars.dt[, mean(mpg), by=cyl]\n\n   cyl       V1\n1:   6 19.74286\n2:   4 26.66364\n3:   8 15.10000"
  },
  {
    "objectID": "R_data_filtering.html#透過外部資料庫-sql-篩選資料",
    "href": "R_data_filtering.html#透過外部資料庫-sql-篩選資料",
    "title": "11  資料篩選",
    "section": "2 透過外部資料庫 SQL 篩選資料",
    "text": "2 透過外部資料庫 SQL 篩選資料\n資料庫有非常多種類型，最常見的是關聯式資料庫(relational database)，諸如常見的 Microsoft SQL Server, SQLite, MySQL/MariaDB, PostgreSQL 等都是關聯式資料庫。在 R 裡頭可以透過一些第三方的套件，像是 RSQLite, odbc, DBI 等來連結。因為架設資料庫需要許多額外的步驟和設定，在此我們用一個輕量化、開放公用領域(public domain)的資料庫 SQLite來做為示範。SQLite 使用相當廣泛，它本身可把資料庫封裝成一個檔案，載入快速且十分輕量化，因此有許多手機 app 都是使用 SQLite 做為資料庫管理系統。\n\n2.1 安裝相關的 R 套件\n請先安裝 RSQLite\ninstall.packages(\"RSQLite\")\ninstall.packages(\"DBI\")\n\n\n2.2 SQL 語法\n這節中將簡介 SQL(Structural Query Language) 的語法，主要會以查詢(Query)來做說明。\nSQL\nSELECT * FROM table_name;\n\n\n2.3 在 R 裡頭使用 SQL\n第一個步驟是載入 DBI 套件，然後建立資料庫的連結。可以想像成有個虛擬的伺服器，要使用 dbConnect() 來連結這個資料庫。使用的資料庫引擎則是 RSQLite::SQLite()。其中您也可以暫時把資料庫放在記憶體中，或是寫入一個實際的檔案，如下列語法：\nlibrary(DBI)\n# 在記憶體中建立一個暫存的 SQLite 資料庫\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n# 若您想要建立實體檔案的話，請輸入以下語法\n# 其中 '/tmp/test.db' 就是這個檔案的位置\n\ncon <- dbConnect(RSQLite::SQLite(), '/tmp/test.db')\n一開始這個資料庫是空的，所以我們嘗試使用 dbWriteTable()來把 mtcars 資料集寫入資料表 “mtcars” 中：\n# 一樣我們用 mtcars 為例\n# 要先建立\ndbWriteTable(con, \"mtcars\", mtcars)\n寫入之後我們可以使用 dbListTables() 來確認一下有沒有這個資料表：\ndbListTables(con)\n範例：使用 SQL 語法來篩選出大於四汽缸的車輛\n作法： 1. 先建立資料庫的連結，使用 dbConnect() 2. 把 mtcars 寫入同名的 mtcars 資料表 3. 使用 dbSendQuery 送出查詢 4. 使用 fetch() 把結果撈回來\nlibrary(DBI)\ncon <- dbConnect(RSQLite::SQLite(), '/tmp/test.db')\n\ndbWriteTable(con, 'mtcars', mtcars)\nresults <- dbSendQuery(con,\n    \"SELECT * FROM mtcars WHERE cyl > 4\")\nfetch(results)\n結果如下：\n    mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n3  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n4  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n5  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n6  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n7  19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n8  17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n9  16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n10 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n11 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n12 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n13 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n14 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n15 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n16 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n17 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n18 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n19 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n20 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n21 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8"
  },
  {
    "objectID": "R_data_io.html",
    "href": "R_data_io.html",
    "title": "7  檔案的輸出入",
    "section": "",
    "text": "把外部資料輸入進 R 的時候，可使用 csv (逗號分隔檔案)或是 txt 資料表的格式。如果你習慣使用 Microsoft Excel 的話，也可以安裝readxl 這個套件來讀取 Excel 的檔案格式。"
  },
  {
    "objectID": "R_data_io.html#讀取檔案",
    "href": "R_data_io.html#讀取檔案",
    "title": "7  檔案的輸出入",
    "section": "1 讀取檔案",
    "text": "1 讀取檔案\n讀取 Microsoft Excel 檔案\n讀取 Excel 時，可使用 readxl 套件中的 read_excel() 來讀取，讀取的時候需要設定活頁簿(sheet)的名稱，若不知道名稱可以用 excel_sheets() 來取得名稱\n# 載入 readxl 檔案\nlibrary(readxl)\n# 使用 excel_sheets 讀取 excel 中的 sheet 名稱\nsheetNames <- excel_sheets('some_excel_file.xlsx')\n# 假設只讀取第一個 sheet\nexcelFile <- read_excel('some_excel_file.xlsx', \n    sheet = sheetNames[1])\n讀取 csv 檔案\n假設我們有個資料表需要輸入進 R 分析，這個資料表長得像這樣： 資料下載\n\n\n\nid\nplot\nspecies\ncover\n\n\n\n\n1\nA01\nA\n5\n\n\n2\nA01\nB\n10\n\n\n3\nA02\nA\n1\n\n\n4\nA02\nC\n2\n\n\n5\nA02\nD\n3\n\n\n6\nA02\nE\n15\n\n\n7\nA03\nF\n25\n\n\n8\nA04\nF\n10\n\n\n9\nA04\nG\n5\n\n\n10\nA05\nA\n1\n\n\n11\nA05\nE\n1\n\n\n12\nA05\nF\n1\n\n\n13\nA06\nA\n1\n\n\n14\nA07\nA\n1\n\n\n15\nA07\nB\n1\n\n\n16\nA07\nC\n5\n\n\n17\nA08\nC\n10\n\n\n18\nA08\nD\n1\n\n\n19\nA08\nG\n2\n\n\n20\nA08\nH\n1\n\n\n\n原始資料的樣貌(csv 檔案請參見 examples/ch1_r_project/data/datainput_example.csv):\nid,plot,species,cover\n1,A01,A,5\n2,A01,B,10\n3,A02,A,1\n4,A02,C,2\n5,A02,D,3\n6,A02,E,15\n7,A03,F,25\n8,A04,F,10\n9,A04,G,5\n10,A05,A,1\n11,A05,E,1\n12,A05,F,1\n13,A06,A,1\n14,A07,A,1\n15,A07,B,1\n16,A07,C,5\n17,A08,C,10\n18,A08,D,1\n19,A08,G,2\n20,A08,H,1\n總共有 20 筆資料，四個欄位，第一列(row)是欄位的名稱。 在把資料輸入進 R 時，記得要先使用 Excel 或是 LibreOffice 看一下，因為有些資料可能沒有清理乾淨(例如分隔符號不統一、空白行、空白欄位等)。讀取資料時，也有可能碰到編碼的問題，例如 Windows 都用 Big5 編碼，碰到 Unicode (萬國碼，通常是 UTF-8)的資料時會出現錯誤亂碼等。這些問題我們先略過不提，在「資料清理」的部份會再詳細解說。\n讀取資料使用 read.table() 或是 read.csv():\n# 在讀資料之前，請先確定資料的位置\n# 是絕對路徑或是相對路徑，例如在 Windows 中\n# \"C:\\Users\\User\\Desktop\\data\\example.csv\" 是絕對路徑\n# \"data\\example.csv\" 是相對路徑\nrawdata <- read.csv('data/datainput_example.csv')\n常用的參數有 header (欄位名稱的有無)、sep(分隔符號)、na.strings (沒有資料的字串，例如 -9999)、skip (省略的行數)等。例如預設讀入 csv 時，會把第一列當成欄位名稱，若你的資料中沒有欄位名稱，就可以使用header=FALSE 來關掉讀取第一列當成欄位名稱。 分隔符號則是當你在讀取以 Tab、pipeline (|) 所需要輸入的符號，例如以 Tab 分隔，參數則為 sep = \"\\t\" (\\t 代表 Tab 鍵)。另外還有個常用的是編碼(encodings)，如果編碼是 unicode，參數為encoding = \"UTF-8\"。\n\n1.1 大檔案的讀取\n不管你是使用 read.table() 或是 read.csv() 等輸入指令，碰到大檔案的時候，我會建議使用 data.table 套件底下的fread() 來讀取資料。舉例來說，有個 csv 檔案約 20 MB，如果使用 read.csv() 來讀取大概要 3.4 秒：\n# proc.time() 來取得計算的時間\nptm <- proc.time()\n  a_csvread <- read.csv('data/testdata.csv')\nproc.time() - ptm\n但如果使用 fread()，則只需要 0.132 秒。\n{.r `code-line-numbers`=\"3\"} ptm <- proc.time()    a_fread <- fread('data/testdata.csv') proc.time() - ptm\n因此當你如果有讀取大檔案的需求，請使用 fread() 來讀取檔案。"
  },
  {
    "objectID": "R_data_io.html#檔案的輸出",
    "href": "R_data_io.html#檔案的輸出",
    "title": "7  檔案的輸出入",
    "section": "2 檔案的輸出",
    "text": "2 檔案的輸出\n和 read.csv 相同，有 read 就有 write，例如：\nwrite.csv(x, 'file/path/to/output/file.csv', row.names = FALSE)\n`write.csv() 預設會輸出列數，若你沒有這個需求的話， 可以把它關閉(row.names=FALSE)。\n另外 data.table 中，也可以使用 data.table::fwrite() 來輸出檔案。"
  },
  {
    "objectID": "R_data_io.html#工作資料的儲存",
    "href": "R_data_io.html#工作資料的儲存",
    "title": "7  檔案的輸出入",
    "section": "3 工作資料的儲存",
    "text": "3 工作資料的儲存\n在 R 裡頭可以把目前工作階段中儲存之變數、載入的資料用 save.image('儲存的路徑/.rdata') 儲存成 R 映像檔，以方便下次使用。在使用 RStudio 退出時，通常也會問您是否要儲存工作階段的映像檔案至家目錄下，如下圖\n\n若要手動儲存與載入的話，可以分別使用 save.image() 和 load() 來載入所儲存的 R 映像檔\n# 儲存目前工作階段映像檔\nsave.image('到/儲存路徑/檔名.Rdata')\n\n# 載入映象檔\nload('到/儲存路徑/檔名.Rdata')\n\n\n\n\n\n\n關於路徑\n\n\n\n路徑在 Windows 作業系統通常是\nC:\\\\Users/yourusername/file.Rdata\n或是相對路徑\ndir/file.Rdata\n如果在 Unix 或是 MacOS 請使用\n/Users/yourusername/file.Rdata"
  },
  {
    "objectID": "R_data_io.html#練習-script",
    "href": "R_data_io.html#練習-script",
    "title": "7  檔案的輸出入",
    "section": "4 練習 Script",
    "text": "4 練習 Script\n\n基本的輸入資料練習 R Script 下載\n\n# 資料的輸出入\nspcover <- read.csv('ecoinformatics_ex1026.csv',\n                    sep = ',', header = TRUE)\n# read.table\nspcover$species\nspcover$cover\nsummary(spcover)\nlibrary(data.table)\nspcover <- fread('C:\\\\Desktop\\\\ecoinformatics_ex1026.csv')\n# 使用 file.choose() 用檔案總管開啟\nspcover <- fread(file.choose())\n\n# 使用 fread 開啟大檔案速度會比 read.csv 快\nptm <- proc.time()\ntest1 <- read.csv('~/Downloads/cwb2006-2015/raw/200601_auto_hr.txt', skip=73)\nproc.time() - ptm\n\nptm <- proc.time()\ntest1 <- fread('~/Downloads/cwb2006-2015/raw/200601_auto_hr.txt', skip=73)\nproc.time() - ptm\n\n處理有中文的外部資料輸入 R Script 下載\n\n# 練習從政府開放資料網下載資料\n# https://data.gov.tw/dataset/6091\n# 全臺灣大專院校名錄\n\n# 預設在 data.gov.tw 上面的編碼是 UTF-8\n# 記得把路徑改成你的檔案路徑，例如 C:\\\\Users\\\\username\\\\u1_new.csv\n# skip = 2\nuniList <- read.csv('~/Downloads/u1_new.csv', \n                    skip = 2)\n# 另外我們也可以使用 data.table 的 fread 來讀取\n\nlibrary(data.table)\nuniList.df <- data.table::fread('~/Downloads/u1_new.csv',\n                                skip = 2, \n                                encoding = 'UTF-8', \n                                header = T)\n\n# 設定好正確編碼後，若讀取仍出現亂碼，請確認一下你的\n# 系統語系(locale)是否正確\n# 輸入 Sys.getlocale() ，如果不是 Chinese (Traditional)_Taiwan.950\n# 者，請輸入下列指令設定 RStudio/R 的語系\n# Sys.setlocale(\"LC_ALL\",\"Chinese (Traditional)_Taiwan.950\")"
  },
  {
    "objectID": "R_data_management.html",
    "href": "R_data_management.html",
    "title": "資料管理",
    "section": "",
    "text": "圖 1: 欄的示意圖\n\n\n\n\n\n圖 2: 列的示意圖\n\n\n但有時候為了效率，資料也可能儲存成矩陣的形式，如下圖三所示：\n\n\n\n圖 3: 資料矩陣格式\n\n\n直的欄位是變數 V，有四個類別；變數 W 是橫向的欄位，有三個類別。以植群調查的資料為例， 變數 V 是物種，有四個物種 A, B, C, D；而變數 W 是調查樣區，有三個樣區 X, Y, Z。 資料數值則是物種的覆蓋度(百分等級)，所以 XA 代表第 X 樣區中的 A 物種，覆蓋度數值就是 a11， XB 則是第 X 樣區的 B 物種，覆蓋度數值就是 a21，以此類推。\n在 R 內建的資料裡頭可以參考 vegan::BCI 或是 vegan::varespec 的資料集。在本章節中， 我們將使用 iris 資料集、mtcars 資料集以及 vegan 套件的 BCI 和 varechem/varspec 資料集來練習。"
  },
  {
    "objectID": "R_data_sorting.html",
    "href": "R_data_sorting.html",
    "title": "9  資料的排序",
    "section": "",
    "text": "# 先用 sample.int 產生 10 個 1–100 的整數\ns1 <- sample.int(100, 10)\ns1\n\n [1]  1 92 72 73 52 20 87 99  8 25\n\n\n\n# 使用 order 排序\norder(s1) \n\n [1]  1  9  6 10  5  3  4  7  2  8\n\n\n此時你會發現怎麼跟想像中的不太一樣，用 order() 排序完給的是順序，即最小的是第八個、次之是第六個，…，而不是排序好的數字，若要直接針對一個數列排序，就得要用 sort() 了。所以如果用 order() 把原本的數列排序好顯示則要用 s1[order(s1)]：\n\ns1[order(s1)]\n\n [1]  1  8 20 25 52 72 73 87 92 99\n\n\n等同於\n\nsort(s1)\n\n [1]  1  8 20 25 52 72 73 87 92 99\n\n\n你可能會觀察到不管是 order() 或是 sort() 都是升冪排序(ascending)，那如果要用降冪排序(descending)呢？\n\nsort(s1, decreasing = TRUE)\n\n [1] 99 92 87 73 72 52 25 20  8  1\n\n\n如果要針對 data.frame 排序呢？ 如果你嘗試使用 sort() 來排序一個 data.frame 的話，馬上就會得到錯誤訊息顯示如下：\nsort(mtcars)\nError in `[.data.frame`(x, order(x, na.last = > na.last, decreasing = decreasing)) : \nundefined columns selected\n因為 sort 本身只能針對 vector 和部分的 factor 資料排序(僅有一個變數的資料)，所以多個變數的 data.frame 就得要使用order() 來排序了。我們以 mtcars 資料集為例來說明 order() 的使用：\n\n# 先載入 mtcars 資料集\nattach(mtcars)\n# 針對馬力(hp)來降冪排序\nmtcars[order(hp, decreasing = TRUE),]\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n\n# 另外一個快速降冪排序法可以在變數前面加上減字號\nmtcars[order(-hp),]\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n\n\n除了針對單一變數的排序，R 是不是也能針對多個變數依序來排序呢？答案是可以的，只要在 order() 中依序填入你想要排序的變數即可，例如我們要針對馬力(hp)先降冪排序，接下來針對汽缸數(cyl)排序，可以這樣做：\n\nmtcars[order(-hp, cyl),]\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n\n\n本節範例 code 下載`]"
  },
  {
    "objectID": "R_data_structure.html",
    "href": "R_data_structure.html",
    "title": "5  資料結構",
    "section": "",
    "text": "另外還有像是陣列(array)和列表(list)等資料結構。陣列和列表都是三維的，但列表內可同時包含相同類型或不同類型的資料，例如可同時含括向量、矩陣和資料框架等。\n\n0.1 向量(Vector)\n假設有一些資料的數值，我們想把它們聚合(concatenate)在一起，R 可以使用 c() 來把資料聚合成「向量(vector)」的形式，例如:\n\nx <- c(1,3,5,7,9)\nx\n\n[1] 1 3 5 7 9\n\n# 此時可以使用 length() 來計算此 x 向量的長度\nlength(x)\n\n[1] 5\n\n\n在提及其他類型的資料結構之前，儲存資料除了數字、文字之外，還有一類型比較特別的資料類型是類別(factor)，以下簡單介紹類別的定義與特性\n\n\n0.2 類別(factor)\n類別(factor)可分為名義類別(nominal)或是順序類別(ordinal)。名義類別的資料像是交通號誌中的紅綠燈，不同顏色分別代表不同的意義；而順序類別資料則是會有「順序」的差別，縱使用數字來代表其本身並無數值上的意義，舉例來說，在植群生態調查資料中，Braun-Blanquet 法把不同覆蓋度的估值轉換成 +, r, 1, 2, … 等不同等級，雖然有些類別是整數，在統計分析的時候整數和類別計算出來的結果不相同。\nR 裡頭不管是名義類別或是順序類別都是使用 factor() 來建立，例如：\n\nfactor(c(1,2,3,4,3,2,1))\n\n[1] 1 2 3 4 3 2 1\nLevels: 1 2 3 4\n\n\n你也可以使用文字來建立類別，例如：\n\nfactor(c('a', 'b', 'c', 'e', 'a'))\n\n[1] a b c e a\nLevels: a b c e\n\n\n如果你要建立有等級的類別時，可搭配使用 order=TRUE 參數：\n比如說地形我們分成稜線(ridge)、上坡(upper slope)、下坡(lower slope)以及谷地(valley)，依照地勢高低順序來做區別，就能夠這麼做：\n\n# 先建立一個向量 a\na <- c('ridge','upper slope', 'lower slope', 'valley')\n# 再使用 factor\ntopo <- factor(a, ordered = TRUE,\n       levels = c('valley', 'lower slope', 'upper slope', 'ridge'))\ntopo\n\n[1] ridge       upper slope lower slope valley     \nLevels: valley < lower slope < upper slope < ridge\n\n\n\n\n0.3 資料框架(Data Frame)\nR 裡頭預設而且最常使用的資料結構是「資料框架」，你可以使用 data.frame() 建立一個資料框架，例如：\n\nx <- c(1,3,5,7,9)\nx.df <- data.frame(x)\nx.df\n\n  x\n1 1\n2 3\n3 5\n4 7\n5 9\n\n\n在顯示資料框架時，每直行(欄; column)最上方會有欄位名稱，而橫列則預設會有數字序列(1, 2, 3, … , n)代表列的索引。\n\n\n0.4 矩陣\n和資料框架很類似，假設我們有 9 個數字，要設定資料結構為 3x3 的矩陣，可以使matrix()：\n\nx <- c(1,3,5,7,9,11,13,15,17)\nmatrix(x, nrow = 3, ncol = 3, byrow = TRUE)\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    7    9   11\n[3,]   13   15   17\n\n\n需要注意的是，如果你希望這九個數字的順序分別是依照列(row)來排列的話，請記得參數要加上 byrow = TRUE，反之依照欄(column)排列的話，則使用 byrow = FALSE (預設是 by column)。\n\nmatrix(x, nrow = 3, ncol = 3, byrow = FALSE)\n\n     [,1] [,2] [,3]\n[1,]    1    7   13\n[2,]    3    9   15\n[3,]    5   11   17\n\n\n\n\n0.5 列表(list)\n前述的向量是一維的資料，而矩陣和資料框架則是二維的資料，而列表則可以是三維的資料。建立一個列表可使用 list()，在下面的例子中，我們使用 sample() 隨機建立兩個 3x3 的矩陣，分別指定為 x 及 y，並把他用list() 合併起來：\n\n# 使用 sample() 建立隨機的正整數\nx <- matrix(sample(9), nrow=3)\ny <- matrix(sample(9), nrow=3)\nlist_xy <- list(x, y)\nlist_xy\n\n[[1]]\n     [,1] [,2] [,3]\n[1,]    5    8    1\n[2,]    7    3    9\n[3,]    6    4    2\n\n[[2]]\n     [,1] [,2] [,3]\n[1,]    1    5    7\n[2,]    3    4    2\n[3,]    9    8    6\n\n\n當看 list_xy 這個列表時，原本的 x 上方有 [[1]]，y 上方則有 [[2]] 來註記，這個是列表的編號。因此你可以使用 list_xy[[1]] 來取得編號 1 的矩陣資料。\n\n\n0.6 判斷及轉換不同的資料結構\n判斷資料結構時，只要把資料結構的名稱前加上 is. 即可，例如：\n\nis.vector(x)\n\n[1] FALSE\n\nis.data.frame(x)\n\n[1] FALSE\n\n\n轉換資料結構也只需使用 as.資料結構名稱，例如：\n\nx <- c(1,3,5,7,9)\nas.data.frame(x)\n\n  x\n1 1\n2 3\n3 5\n4 7\n5 9\n\n\n\n\n0.7 資料結構的索引\n設定成資料框架或矩陣的好處就是你可以用 subscript 的方式來列出資料， 在 R 裡頭通常使用中括號([列數, 行數])來表示，例如列出第三列第五行\n\n# 隨機產生 50 個整數，使用 sample() 函式\nx <- sample(50)\nx.m <- matrix(x, nrow = 10)\nx.df <- data.frame(x.m)\nx.m\n\n      [,1] [,2] [,3] [,4] [,5]\n [1,]   11   44   34   43   18\n [2,]   38   28   41   17   19\n [3,]   46   45   48   37   21\n [4,]    3   10   13   33    7\n [5,]   15   49   12   22   26\n [6,]    9   25   23    5   40\n [7,]   27   31    4   47   42\n [8,]    6    2    8   24   50\n [9,]   29   36   30   35   16\n[10,]   32   20   39   14    1\n\n\n\nx.m[3,5]\n\n[1] 21\n\n\n如果僅要列出某特定「列」或特定「行」，可以使用:\n\n# 列出第三列\nx.m[3,]\n\n[1] 46 45 48 37 21\n\n# 列出第三行\nx.m[,3]\n\n [1] 34 41 48 13 12 23  4  8 30 39\n\n\n另一個 R 強大的功能就是你可以指定特定列數、行數外， 還可以做邏輯判斷和數學運算，例如我們把第三列取 log 值：\n\nlog10(x.m[3,])\n\n[1] 1.662758 1.653213 1.681241 1.568202 1.322219\n\n\n或是條件篩選，把第三列中大於 30 的數字選出來\n\nx.m[3,] > 30\n\n[1]  TRUE  TRUE  TRUE  TRUE FALSE\n\n\n你會發現它只會顯示邏輯判斷，即 True 或 False，若要顯示大於 30 的數字呢？\n\nx.m[3, x.m[3,]>30]\n\n[1] 46 45 48 37\n\n\n作業"
  },
  {
    "objectID": "R_flow_control.html",
    "href": "R_flow_control.html",
    "title": "6  流程控制",
    "section": "",
    "text": "很多生物或生態背景的人看到「程式設計」都會有點恐懼，其實程式設計並不難，基本上就是了解語法及邏輯。在這節我們會用簡單的例子來介紹 R 的程式設計，尤其是流程控制(flow control)這部份。相信許多人都會畫簡易的流程圖，這部份的流程控制就是把流程圖轉換成文字來告訴 R 該怎麼執行。流程控制在程式語言中有個專有名詞稱為「控制結構(control structure)」，通常在一般的程式語言中，有循序(sequence)、選擇(selection)以及重複(repetition)三種類別。「循序」就是由上至下一行一行的依照順序執行，我們在寫 R 程式碼時大部分都是循序的執行；「選擇」則是有許多不同的條件，如果符合條件的話，就會依照條件下來執行；「重複」字面上來看就是不斷地重複執行某些工作。\n我們用生活中的例子來說來協助理解，例如使用洗衣機洗衣服，在 R 程式設計中該怎麼用控制結構呢？\n控制結構: > 1. 洗衣機有插電嗎？ > 有：進行步驟 2  > 無：插上插頭後，進行步驟 2  > 2. 放髒衣服進洗衣槽\n在 R 的流程控制中，即使是像洗衣機插上插頭這種細節都必須要寫進去。 所以我們接下來先看一下 R 裡頭的控制結構有哪些，再分別一個一個來仔細說明。"
  },
  {
    "objectID": "R_flow_control.html#作業",
    "href": "R_flow_control.html#作業",
    "title": "6  流程控制",
    "section": "6.1 作業",
    "text": "6.1 作業\nHW3"
  },
  {
    "objectID": "R_flow_control.html#上課練習-r-script",
    "href": "R_flow_control.html#上課練習-r-script",
    "title": "6  流程控制",
    "section": "6.2 上課練習 R Script",
    "text": "6.2 上課練習 R Script\n``R ## 2017-10-26 Ecoinformatics #.libPaths(‘~/Library/R/site-libraries/’)\nx <- 10 # 使用 ifelse() 函式 ifelse(x <= 5, “Yes”, “No”) # 使用 if … else … if ( x <= 5 ){ print(“Yes”) } else { print(“No”) }\na <- rnorm(1) # if-elseif-else 選擇 if ( a < 5 ) { print(“a is less than 5”) } else if ( a > 0 ) { print(“a is between 0 to 5”) } else { print(“a is greater than 5”) }"
  },
  {
    "objectID": "R_function.html",
    "href": "R_function.html",
    "title": "8  自定函式",
    "section": "",
    "text": "R 和其他語言一樣，可以自行定義函式(function)，在基本操作的章節裡頭我們曾提過使用 R 內建的函式。當你需要重複處理一些程序時，自己撰寫函式就可以反覆使用程式碼，不需要每次都得執行落落長的 R 程式。舉例來說，當計算 Shannon-Wiener 多樣性指數時，我們用 R 來計算會怎麼做呢？\nShannon-Wiener 多樣性指數的公式如下：\n\\[\nH' = - \\sum_{i=1}^{S} P_i \\cdot ln (P_i)\n\\]\n其中 S 是一地的總物種數， \\(P_i\\) 則是第 \\(i\\) 個物種之數量佔總物種數量的比例\n若臺灣某森林樣區裡頭木本植物的數量如下表所示，其中第一個欄位是物種名(species)，第二個欄位則是該物種在樣區裡頭的數量(individuals)：\n原始的資料可至github 生態資訊學上課資料中下載。\n所以若要計算這個樣區的 Shannon-Wiener 多樣性指數，R 的 code 如下：\n本範例 code 下載\n可是每次有一個新的資料進來，計算就得要重新執行一次 (也就是執行上面的程式碼)，此時就可以把上面的步驟包裝成一個函式，簡化工作。試著想想：如果有個函式叫做 shannon()，每當我們想要計算 Shannon-Wiener 多樣性指數的時候，就呼叫它計算，這樣是不是很方便呢？接下來我們將針對函式的結構及撰寫來做介紹。"
  },
  {
    "objectID": "R_function.html#函式結構",
    "href": "R_function.html#函式結構",
    "title": "8  自定函式",
    "section": "1 函式結構",
    "text": "1 函式結構\n一般 R 函式的結構如下：\nmyFunction <- function(參數1, 參數2, ...){\n    陳述(statements)\n    return(objects)\n}\nfunction(){} 括號內的是參數(parameters)，大括號則是你想執行的程式碼(statement)，如果你希望這個函式計算完之後能回傳(return)一些東西(數值或物件等)，也可以在函式內的最後一行加上return(你要傳回的物件)。\n範例一、Hello World\n\n### 生態資訊學範例\n\nhelloWorld <- function(){\n    print('Hello World!')\n}\n\nhelloWorld()\n\n[1] \"Hello World!\"\n\n\n本範例 code 下載\n在這個範例中，自訂的函式沒有參數，內容只有印出「Hello World!」\n範例二、加入參數的函式\n我們稍微改一下上面 Hello World 的範例，加上參數\n\n### 生態資訊學範例: function\n\nhelloWorld <- function(username){\n  sprintf('Hello! %s', username)\n}\n\nhelloWorld('小熊維尼')\n\n[1] \"Hello! 小熊維尼\"\n\n\n本範例 code 下載\n這個例子中，我們用到 sprintf 這個 C 類型的字串格式化函式，裡頭的 %s 代表變數(s 代表 string)，變數的內容是 username。所以當使用者輸入 helloWorld('小熊維尼') 時，這個函式就會印出 “Hello! 小熊維尼”。\n範例三、設定參數的預設值\n你可能會想問，參數是否可以有預設值呢？答案是可以的！只要在參數後方加上=value，這個 value 就是該參數的預設值，舉例來說：\n\n### 生態資訊學範例: function\n\nhelloWorld <- function(username='小熊維尼'){\n  sprintf('Hello! %s', username)\n}\n\nhelloWorld()\n\n[1] \"Hello! 小熊維尼\"\n\n\n本範例 code 下載\n若這個函式內有預設值的話，即使呼叫函數沒有加上參數也能夠執行，所以上面的執行結果也會印出 “Hello! 小熊維尼”。\n範例四、Shannon-Wiener 多樣性指數計算\n回到本節最前面的實例，如果我們要把 Shannon-Wiener 多樣性指數包成一個函式該怎麼做呢？以本例來說流程可以切為三個步驟：\n\n分析這個函式需要輸入什麼參數？\n內容該如何計算？\n需要輸出哪些東西？\n\n在第一個步驟中，我們需要有物種和其個體數的資料，資料格式共有兩個欄位。接下來第二步驟就是先算出總物種個體數，以及個別物種的個體數佔總物種數的比例。最後則是把計算出來的數值輸出，所以函式可以這樣寫：\n\nShannonWiener <- function(filePath) {\n  twforest <- fread(filePath)\n  # 計算總物種數\n  S <- twforest[, sum(individuals) ]\n  # 計算個別物種數佔總物種數之比例\n  p_i <- twforest[, individuals/S ]\n  # 最後加總並算出 Shannon-Wiener (H') 多樣性指數\n  H <- -sum(p_i * log(p_i))\n  return(H)\n}\n\n本範例 code 下載\n在第一行內，filePath是我們要輸入的參數，也就是輸入的檔案路徑。所以在第二行就使用 fread() 來讀取這個參數。之後的4–8行和我們之前的程式碼相同。第九行則是傳回 H 這個變數，也就是計算完的 Shannon-Wiener 多樣性指數。"
  },
  {
    "objectID": "R_function.html#分享你的函式",
    "href": "R_function.html#分享你的函式",
    "title": "8  自定函式",
    "section": "2 分享你的函式",
    "text": "2 分享你的函式\n當撰寫完你的函式之後，如果你想和別人分享，可以把它包成套件(package)上傳 CRAN 或是 github 和其他人分享。但包套件是比較複雜的程序，需要有許多先備知識，未來進階的課程內容有機會會提到。這節將使用 http://gist.github.com (簡稱 gist )來分享你的函式。gist 是一個貼程式碼的網站(像剪貼簿一樣)，你可以直接把上面的程式碼複製貼上(請記得先登入，這樣以後就可以管理你的程式碼)。如下圖：\n\n接下來你會在瀏覽器的網址列看到這段函式的網址列(即：https://gist.github.com/mutolisp/643dc4795d0b31f1ef3fdaca1641fa7e)。請先複製起來等會會用到。回到 RStudio 中，請確認一下已經安裝了 devtools 套件。\n載入 devtools 之後，就可以使用 source_gist() 來載入剛剛你貼到 gist 的 R function。第一個參數是看起來像亂碼的 hash code，以本例來說就是 643dc4795d0b31f1ef3fdaca1641fa7e，後面的 filename 則是你自行命名的 filename，在這裡則是 ShannonWiener.r\n\n\nlibrary(devtools)\n\nLoading required package: usethis\n\nsource_gist('643dc4795d0b31f1ef3fdaca1641fa7e', filename = 'ShannonWiener.r')\n\nℹ Sourcing https://gist.githubusercontent.com/mutolisp/643dc4795d0b31f1ef3fdaca1641fa7e/raw/9b4b87c76be8addbfdfe4d0942488425a8ec18d4/ShannonWiener.r\n\n\nℹ SHA-1 hash of file is 7f2f82fb8a53d941030907fa7aa43d8ab0431ed4\n\nShannonWiener('https://raw.githubusercontent.com/mutolisp/ecoinformatics_course/master/data/twforest.csv')\n\n[1] 2.827801\n\n\n本範例 code 下載\n當使用 source_gist() 後你就直接可以用 ShannonWiener 函式了！"
  },
  {
    "objectID": "R_function.html#作業",
    "href": "R_function.html#作業",
    "title": "8  自定函式",
    "section": "3 作業",
    "text": "3 作業\n\n請寫出一個可計算 Shannon-Wiener 多樣性指數和Simpson 多樣性指數(包含 Simpson index, Simpson diversity index, inverse Simpson)的函式，函式必須加入可讓使用者選擇多樣性指數的參數\n請寫出一個可計算費布納西(fibonacci)數列的函式`"
  },
  {
    "objectID": "R_fundamental.html",
    "href": "R_fundamental.html",
    "title": "2  入門基礎",
    "section": "",
    "text": "Note\n\n\n\n如果你已經對於 R 的基本操作有概念了，可以跳過這章。 如果你在後面的章節碰到問題，可以隨時來這裡查詢怎麼嘗試自己解決問題。\n這個章節主要是引領各位進行 R 的實際操作。一開始會先教各位如何使用 R 的 console 介面，然後教導如何善用說明文件以及網路上的資源，最後則是介紹物件、資料類型、基礎數學運算以及資料處理等。在讀完本章節之後，你將會學習到:"
  },
  {
    "objectID": "R_fundamental.html#自學-r-的要訣",
    "href": "R_fundamental.html#自學-r-的要訣",
    "title": "2  入門基礎",
    "section": "1 自學 R 的要訣",
    "text": "1 自學 R 的要訣\nR 的設計本身就很適合拿來自習，一開始如果沒有接觸過 UNIX 作業系統的人，通常會覺得 R 很難上手，而且都是使用指令來操作一定很不容易。雖說如此，R 的學習曲線在一開始會很陡，但是一旦習慣 R 的模式之後，後續的操作就會無往不利，你可以靠著眾多網路資源、經驗配合 R 本身彈性的設計來發揮你的創意，有許多分析和資料處理往往只需要腦筋轉個彎就能夠達成。這個章節會從怎麼閱讀 R 的說明檔開始、如何「有智慧地問問題」以及利用網路資源進行疑難排解。"
  },
  {
    "objectID": "R_fundamental.html#讀懂-r-的說明檔",
    "href": "R_fundamental.html#讀懂-r-的說明檔",
    "title": "2  入門基礎",
    "section": "2 讀懂 R 的說明檔",
    "text": "2 讀懂 R 的說明檔\n在開始下一個階段教學之前，我想先花一些篇幅介紹 R 的說明檔。我認識許多人常說，R 裡頭的說明不知道在寫什麼耶，完全不了解它的明白！看起來寫的很詳細，但讀起來卻有點似懂非懂。這是因為 R 的前身 S 語言是從 UNIX 作業系統所開發出來的，這些資訊科學的前輩們，邏輯思考易於常人的清晰，說明檔的內容及格式也都有嚴格的定義及規範。R 受到了 UNIX 文件的影響，讀起來則和一般的文件不太一樣，但是仔細閱讀，你會發現這些文件都寫的十分詳細，只是閱讀上需要有一些技巧(當然不要被英文給嚇到了！大部分的英文都是很淺顯易懂的)。接下來我們一步一步來解析 R 的文件。\n查閱 R 的文件有幾種方式，如果你知道某個特定套件的函式 (function)，你可以在 R console 中輸入?函式名稱，就會直接顯示該函式的說明。如果你僅知道某些關鍵字，但不知道是在哪個特定的套件中之函式，你可以使用??關鍵字來查詢。如果你搜尋到某些套件，安裝完畢某套件之後，想要知道這個套件的簡介，還有它的功能、函式等，可以使用help(package=套件名稱」來閱讀。例如我們如果要查維度分析(ordination)這個關鍵字，我們先使用 ??ordination 來查詢，在一般的 R Console 中會顯示如下：\n# 查詢特定關鍵字\n> ??ordination\nVignettes with name or keyword or title matching ‘ordination’\nusing fuzzy matching:\n\nvegan::intro-vegan      Introduction to ordination in vegan\n\n(略)\n\nHelp files with alias or concept or title matching ‘ordination’\nusing fuzzy matching:\n\n\n(略)\nvegan::ordiplot         Alternative plot and identify Functions\n                        for Ordination\n(略)\n若是使用 RStudio，上面的顯示會用比較美觀的 HTML 排版在 Help 區域(預設是右下角)，如下圖：\n\n\n\nRStudio Help 區域顯示說明檔\n\n\n查詢時可看到兩大類說明文件，分別為 Vignettes(短文簡介) 和 Help pages(說明頁面)。Vignettes 原意指的是小品文，在 R 裡頭指的是相對篇幅比較長的說明文件，我們暫且稱之為「短文簡介」，在一個第三方套件的短文簡介中，會詳細交代這個套件有哪些功能，有些甚至會寫簡單的統計原理、範例、圖表等有助於讀者理解的內容。\n而一般的說明頁面僅會記載套件功能、簡要敘述等，細節後面會再提到。所以應該怎麼閱讀呢？如果你已經對這個套件有一定的熟悉度，知道函式名稱，只是想查詢參數(arguments)怎麼用，你可以直接閱讀說明頁面。\n但你安裝了一個新的第三方套件，完全不知道有哪些函式功能可用，如果這時候你直接查每個函式說明頁面一定會一頭霧水不知該如何下手，這時候閱讀 R 的「短文簡介」就是一個好的出發點，你可以從頭閱讀，知道大致上這個套件的目的、基本的功能，也能直接從範例中學習。以下為 vegan 套件中的 intro-vegan摘要：\n\nThe document describes typical, simple work pathways of vegetation ordination. Unconstrained ordination uses as examples detrended correspondence analysis and non-metric multidimensional scaling, and shows how to interpret their results by fitting environmental vectors and factors or smooth environmental surfaces to the graph. The basic plotting command, and more advanced plotting commands for congested plots are also discussed, as well as adding items such as ellipses, convex hulls, and other items for classes. The constrained ordination uses constrained (canonical) correspondence analysis as an example. It is first shown how a model is defined, then the document discusses model building and signficance tests of the whole analysis, single constraints and axes.\n\n裡頭解釋了 vegan 這個套件在做什麼(simple work pathways of vegetation ordination)，分別有哪些功能等。但是如果是一般的 help pages，其結構僅有函式敘述(description)、簡要使用方法(usage)、參數(arguments)、使用細節(details)、作者(authors)、參照(see also)及範例(examples)等主題。我們舉例來說明，下圖是查詢 ls 的說明頁面部分截圖：\n\n\n\nRStudio Help 區域顯示說明檔\n\n\n在最左上角顯示 ls {base} 代表是 base (R 的基本元件) 中的函式 ls，如果是第三方套件的話，大括號內則會顯示其套件名稱。接下來 List Objects 代表了 ls 這個函式的標題，例如本例中為列出物件(list objects)。下表列出說明頁面中的主題及其說明：\n\n\n\n主題\n說明\n\n\n\n\nDescription\n簡單敘述這個函式功能\n\n\nUsage\n簡要描述怎麼使用\n\n\nArguments\n參數名稱及細節\n\n\nDetails\n細節說明\n\n\nAuthors\n作者資訊\n\n\nSee Also\n參照相關的指令或函式\n\n\nExamples\n範例\n\n\n\n在 Examples 裡頭，列出了範例 code，如果你想知道執行的結果，可以使用 example() 來執行，例如 example(ls)。\n另外你可能會發現到搜尋時會顯示像 vegan::intro-vegan、vegan::ordiplot 中間會有兩個冒號(:)，這代表「命名空間(namespace)」，在上述的例子中，vegan代表套件的名稱，兩個冒號後方代表 vegan 套件中的函式名稱。為什麼要這樣做呢？這是為了要解決不同命名空間中可能有函式名稱衝突的問題，假設 A 套件中有個功能叫做 plot()，和 graphics 裡頭的 plot()一模一樣，如果你在 R console 中輸入 plot()，預設會是 graphics 的 plot()，若你要呼叫 A 套件中的 plot()，此時就要使用A::plot() 來執行。強制使用命名空間是 R 2.14.0 版本之後才開始的，更早之前的 R 版本是沒有的，關於 namespace 的說明可以參考 Hadley Wickham 所寫的 Namespaces。"
  },
  {
    "objectID": "R_fundamental.html#如何有智慧地問問題",
    "href": "R_fundamental.html#如何有智慧地問問題",
    "title": "2  入門基礎",
    "section": "3 如何有智慧地問問題",
    "text": "3 如何有智慧地問問題\n\n這小節改寫自「如何有效率的「問」問題」\n\n談到有智慧地問問題之前，一定得提及 Eric Raymond。Eric 寫了一篇很有名的文章來論述(Eric 是《教堂與市集》的作者，同時也是資深駭客，堪稱為自由軟體界的歷史學家)寫了一篇《How to ask question the smart way》，直到最近仍有持續修訂這份經典之作。如果你沒有讀過這份文件，我強烈建議你讀一次，雖然是英文的，但文件本身非常輕鬆好讀。\n簡單講一下一些大原則，在你提出問題時，可以問看看你自己。"
  },
  {
    "objectID": "R_fundamental.html#搜尋",
    "href": "R_fundamental.html#搜尋",
    "title": "2  入門基礎",
    "section": "4 搜尋",
    "text": "4 搜尋\n\n你真的有好好用過 Google / DuckDuckGO 等搜尋引擎找關鍵字嗎？(關鍵字：stackexchange, stackoverflow)\n你真的搜尋不到你要的相關主題或提示嗎？\n拼字有拼對嗎？\n\n搜尋主要是要有針對性與特定的問題，才能比較好過濾資訊，這個每個人都會有一些小撇步。依照我的經驗法則，通常可以用「方法」加上「使用軟體/步驟」及「文件類型」等來搭配，常常在搜尋引擎前三到四個頁面就可以找到我想要的答案(但當你什麼都不懂時，請先去學校上基礎課程，或是找一些 open course 來自修)。例如：\n我想要找空間資訊中的交集問題，你可以用 gis + intersection 但這樣的結果往往是出現最多人使用/或最常被搜索的關鍵字，所以若你已經知道有哪些軟體或方式可以做，你可以嘗試修改一下關鍵字： postgis + intersection 但這樣的搜尋結果也許不盡滿意，如果只是想看一下 postgis 做交集的範例說明，可以用下列的關鍵字搜尋： postgis + intersection + tutorial 若你不是想找文件和教學，而是實際上遇到了問題卡住，例如你今天做交集時，遇到 ERROR:  function st_intersect(geometry, raster) does not exist，也許你可以用: postgis + st_intersect + error 來找尋相關的解法（上述例子是 st_intersect() 拼錯字，字尾少了一個 s，這個有可能會有搜尋引擎自動幫你更正）"
  },
  {
    "objectID": "R_fundamental.html#提出問題",
    "href": "R_fundamental.html#提出問題",
    "title": "2  入門基礎",
    "section": "5 提出問題",
    "text": "5 提出問題\n我舉幾個最近有人問我的問題來回答（為了相關人的隱私，所以只節錄問題主幹，問候語與署名等皆去除），這樣比較容易讓大家了解為什麼要這樣問，別人問的問題也許就是你想問的問題。\n\n範例一\n\n… 我想請問你 未來氣候資料的兩個子情境因子 A,B 兩個分別是代表什麼啊??\n\n解析：\n\n這個例子中，很明顯就是事主連搜尋都不願意花功夫， 即使用「未來氣候+情境+A+B」這樣的中文關鍵字也能找到答案。 如果你問我這個問題，我回答的意願趨近於零。\n\n範例二\n\n… 今天老師覺得上次請你幫忙的DEM及坡度好像又有問題 你上次給我的檔，之後老師有再轉成網格檔，我再切成各行政區，然後再用ZONAL STAT算出每個地籍的平均坡度。 也許是我轉檔的過程中又有問題，但一時間也想不出來 …\n\n解析：\n\n這個「問題」的問題出在語焉不詳，雖然已經有提出使用的方法，但是過程仍然沒有交代清楚。以下舉幾個常犯的錯誤（我以前也是有犯過類似的錯誤）：\n\n\n\n這個看起來怪怪的（哪裡怪？有像怪老子一樣怪嗎？）\n看起來有問題（怎麼看？閉著一隻眼睛看？還是倒立看？）\n算出平均坡度後有問題（你怎麼算的？）\n\n\n事主一直遇到問題，一直問了「問題」，但是沒有詳細的步驟， 也很難有人想回答這個問題。\n但如果你這樣問問題，我會樂意幫你找出解答：\n我用 gdaldem 把你上次給我的 dem.tiff 檔案轉成坡度檔，轉檔的方式為：\ngdaldem slope dem.tiff slope.tiff\n但我用 ArcMap 匯入 slope.tiff 和之前做的 slope2013.tiff 比較後發現數值差很大，附檔是我用 arctoolbox 中的zonal statistics 計算 land.shp 和 slope.tiff 的輸出值…. （後略）\n如果是這樣問問題，我就能馬上告訴事主，他使用的 gdaldem 少加了一個參數 -p (gdaldem 預設是計算「度」，要加 p 才會計算 percent），只需要我看完問題就能馬上告訴事主問題點在哪。\n範例三\n\n… 匯入X.Y點位後要輸出成shapefile檔，可是檢查資料夾時卻只看到look檔， 是哪裡出問題了呢？\n\n解析\n我會問你的是：\n你用什麼軟體做？ArcGIS/QGIS/R? 什麼是 look 檔？是附檔名 .look (當然我猜有可能是 .lock 檔）？還是資料夾中只有 look 這個檔案或目錄？然後我就覺得很麻煩，你問我問題我還需要擲杯問一下媽祖還是土地公，回答的意願也是趨近於零。\n若你這樣問問題： `` 題目：我用 ArcMap 10.0 版將 xy 座標匯入後，轉成 shape 檔失敗，並只出現附檔名為 .look 的檔案，請問如何解決呢？\n使用的軟體及輸入格式： ArcMap 10.0 xy 座標檔案格式： csv\n步驟： 將 csv 檔案匯入 ArcMap 中後，按右鍵 display xy，接下來載入該圖層後，另存新檔至 C:/tmp/ 則出現失敗字樣 error 代碼及訊息如下 …(略）… 重複數次都是得到相同的結果，請問這個問題大概出在哪邊呢？ `` 上面的方式有附上錯誤訊息及相關的操作步驟，會更容易找出錯誤在哪。有時候我光是把作法寫下來，看一下錯誤訊息，透過搜尋相關的問答，換個方法或調整錯誤的參數，試一下大概就能解決了。\n\n最後請記得，沒有人有義務回答你的任何問題，大家都是花了自己額外的時間和精神互相幫忙，在別人幫你之前，請你自己先幫自己，作業要自己做，不要抄別人的。"
  },
  {
    "objectID": "R_fundamental.html#自行找解答的模式",
    "href": "R_fundamental.html#自行找解答的模式",
    "title": "2  入門基礎",
    "section": "6 自行找解答的模式",
    "text": "6 自行找解答的模式\n讀完「有智慧地問問題」後，你可以試著查詢 Stackoverflow 上的問答。Stackoverflow 是一個專為「問問題」然後提供解答的網站，這裡的問題都是有明確解答的，但不包含「什麼是生命？」這類開放式的問題，例如：「 R 要如何匯入 Excel 的檔案？」這樣的問題。在 Stackoverflow 上發問都有人投票，如果你的問題問的清楚且容易理解，就會有其他人可以票選提昇你的問題能見度。回答問題也是類似的模式，若你回答其他人的問題時，其他人認為你的回答能解決提問者的問題或對他而言是有用的，此時其他人也能投票增加你的問題能見度。反之若你的問題不知所云或回答錯誤，投票評比則會減分，降低你提問或回答的能見度。所有在 Stackoverflow 上的問答都會賺取名譽(reputation)分數，累積到一定的分數才能投票或修改別人問題等權限。\n下圖為問問題的截圖(原始頁面)，左方可投票(但是需要 15 點聲望值才會公開顯示) \n你可以參閱 How can I flip and then zoom in on a boxplot 這個問題，底下的回答有加分也有減分的。\n相關 R 的問題可以參見 R tagged questions，在你遭遇到困難時，請記得把你的問題詳細寫出來，試著先自己找解答並善用 Stackoverflow 上別人曾問過的問題解答。\n))))`"
  },
  {
    "objectID": "R_ggplot2_intro.html",
    "href": "R_ggplot2_intro.html",
    "title": "16  ggplot2 繪圖簡介",
    "section": "",
    "text": "上一節簡介了 R 的基本繪圖後，你應該對於使用 R 繪製圖形具有簡單的認識，這一節將會使用 ggplot2 這個現代的繪圖函式庫來繪製。ggplot2 是 grammar of graphical plot 2 的縮寫，最早由 Wilkison (2005) 所提出的建立的 R 繪圖文法，後來由 Wickham (2009) 所開發出來的套件。ggplot2 簡要來說就是將資料繪製成圖形的過程中，從統計數據產製成幾何元件(geometry objects，例如：散佈圖、折線圖、柱狀圖等)的美學屬性(aesthetic attribute，例如：顏色、形狀、大小等)之映射。以 ggplot2 繪圖文法所繪製的圖由資料、幾何元件、座標系統、主題(theme)等所構成，而相關的繪圖元件，不管是繪圖類型、座標系統都能使用加號(+)串連在一起。ggplot2 包含三個主要繪圖項目，我們以下圖1來示意：\n\n資料(data)：繪圖的資料來源，一般會先使用 ggplot() 來輸入資料\n繪圖類型，即幾何元件(geometry; 簡稱 geom )：繪圖的類型，例如柱狀圖(bar plot)、散佈圖(scatter plot)、盒鬚圖(box plot)等。ggplot2 中可以疊加不同的幾何元件圖層\n座標系統(coordinate system)：繪圖的座標系統，預設是coord_cartesian()\n\n 圖1、ggplot2 文法示意圖\nggplot2 的語法結構如下：\n\n一個以 ggplot2 繪製的圖形，必須要包含 ggplot(data) + geom_function(mapping) 這兩個必要的繪圖元件，即資料與要繪製圖的幾何元件。其餘的座標函式(coordinate functions)、多圖排列組合函式(facet functions)、軸刻度函式(scale functions)與主題函式(theme functions)則不一定要指定。\n我們以燃油經濟效率資料集(R 內建的 mpg 資料集)做為範例來解釋。在繪圖前，我們必須先決定要繪製哪種類型的圖、變數多寡(一個、兩個或是三個以上)，至於其餘的繪圖顏色、形狀、座標軸細節等可以繪圖過程中再微調決定。\n假設我們繪製的條件如下： 1. 資料集：mtcars 資料集 2. 繪製類型：散佈圖 3. 變數：兩個變數，分別為「發動機的排氣量(displ = engine displacement，單位為公升)」與「高速油耗(hwy = highway mileage，即每加崙可行駛的英哩數)，其中發動機的排氣量為自變數(x)，高速油耗為應變數(y)\n以 ggplot2 繪製圖形的 R 程式碼如下：\n\n# ex1\nlibrary(ggplot2)\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy))\n\n\n\n\n在上述的 R 語法中，使用了 ggplot() 和 geom_point() 這兩個繪圖元件。其中 ggplot() 是起始繪圖的函式，資料載入 mpg 資料集；而 geom_point() 則是繪製「幾何元件」的點，在 ggplot2 中以 geom 開頭的函式都是繪製幾何元件的功能，例如 geom_smooth()、geom_boxplot() 以及 geom_abline() 等。繪製出來的結果如下圖2。\n 圖2、使用 ggplot2 來繪製發動機排氣量和高速油耗之散佈圖\n我們也可以將 aes() 放在 ggplot 中，並存成一個變數 fig2，例如：\n``{r} fig2 <- ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() fig2\n\n### 1.1 繪製三個以上變數\n\n若要在二維的圖中呈現三個變數，我們可以考慮用顏色來區別。我們設定第三個變數為不同的車輛型式(即 class，為類別資料)，R 程式碼如下：\n\n::: {.cell code-line-number='3'}\n\n```{.r .cell-code}\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, color = class))\n\n\n\n:::\n\n圖3、繪製三個以上的變數範例\n\n\n在上述圖3的例子中我們在 geom_point() 中使用了 mapping = aes()。 ggplot2 可使用多個圖層疊加起來，你也可以在上面圖3套疊平滑趨勢曲線，例如：\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, color = class)) +\n  geom_smooth(mapping = aes(x = displ, y = hwy))\n\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'\n\n\n\n\n\n\n圖4、套用散佈圖(geom_point)與平滑趨勢曲線(geom_smooth)\n\n\n\n我們也能在 ggplot2 中套用不同的統計模式，像是迴歸模型(regression models)。假設我們想求得發動機排氣量和高速油耗之間的關聯性，可以使用簡單線性迴歸，類似在 1.2 節中使用 geom_smooth() 的方式，只需要加上 method = \"lm\" 即可(lm 代表 linear regression)，繪圖的時候 ggplot2 也會自動預設加上信賴區間，R 程式碼如下：\n``{r} ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class)) + geom_smooth(mapping = aes(x = displ, y = hwy), method = “lm”)\n\n![](https://i.imgur.com/e4lGE6Q.png)\n圖5、散佈圖加上線性模型\n\n``geom_smooth()`` 預設支援常用的迴歸模式，像是簡單線性迴歸(simple linear regression; ``method = \"lm\"``)、廣義線性模型(Generalised Linear Model; GLM; ``method = \"glm\"``)、廣義加成模型(Generalised Additive Model; GAM; ``method = \"gam\"``)。也能夠自行定義模型的參數，例如二項式分布(binomial)、布瓦松分布(Poisson)等，程式碼如下：\n``{r}\n# 使用 binomial family，連結函數為 logit\ngeom_smooth(method = \"glm\", method.args = list(family = \"binomial(link = logit)\"))\n如果要自行設定方程式也可以，使用 formula 指定方程式即可，舉例來說，我們設定方程式為\n\\[\n\\begin{equation}\ny = x^2 + exp (x)\n\\end{equation}\n\\]\n以上面的方程式來繪圖，ggplot2 語法如下：\n``{r} ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class)) + geom_smooth(mapping = aes(x = displ, y = hwy), method = ‘lm’, formula = ‘y ~ x^2 + exp(x)’ )\n\n![](https://i.imgur.com/kutBT5Z.png)\n圖6、散佈圖加上 $y = x^2+exp(x)$ 的線性模型適配圖\n\n### 1.4 套用不同的符號\n\n另外在繪製時也能使用不同的圖徵，即在 ``aes()`` 中加入 shape，其數值為某一個類別變數，以 mpg 資料集為例就是 ``class``：\n\n::: {.cell code-line-number='3'}\n\n```{.r .cell-code}\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, shape = class))\n\nWarning: The shape palette can deal with a maximum of 6 discrete values because\nmore than 6 becomes difficult to discriminate; you have 7. Consider\nspecifying shapes manually if you must have them.\n\n\nWarning: Removed 62 rows containing missing values (geom_point).\n\n\n\n\n:::\n 圖7、套用不同的符號\n\n\n\nggplot2 預設使用的是灰底加上座標格線，若要更換不同的主題，ggplot2 預設提供了黑白配色(theme_bw)、灰階配色(theme_gray)、經典配色(theme_classic)、線條配色(theme_linedraw)、暗色調配色(theme_dark)、亮色調配色(theme_light)等主題。如下圖範例所示：\n 圖8、不同的主題配色範例圖\n若要使用主題，只要加上 theme_主題名稱() 即可，以 mpg 資料集為例，其完整語法為：\n``{r} ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class)) + theme_bw()\n### 1.6 美學屬性參數微調\n\n**aes  或 geom_$function 參數：**\n* x：設定 x = $變數 。若為單變數，繪製時 x 軸為變數，y 軸則為次數或密度\n* y ：設定 y = $變數。若為單變數，繪製時 y 軸為變數，x 軸則為次數或密度\n* alpha：透明度，數值為 0–1，從完全透明至完全不透明\n* color：前景(線條、框線)顏色，可使用顏色的英文(例：white)，或是16進位碼(例：#ffffff 為白色)\n* fill：背景填色\n* linetype：線條的類型，可使用 0–6 的代碼，分別代表：0 = 空白(blank), 1 = 實線(solid), 2 = 虛線(dashed), 3 = 點線(dotted)，4 = 點虛線(dotdash), 5 = 長虛線(longdash), 6 = 雙虛線(twodash)\n* size：線條粗細\n* shape：圖形類別，0–16\n* weight：權重\n\n### 1.7 排列位置調整\n\n在圖形的幾何元件(``geom_$function``)可使用 ``position`` 來調整，位置排列的方式有分散排列(dodge)、填滿在某個元件之中(fill)、堆疊(stack)、分散點排列(jitter)、推移(nudge)等。\n\n範例1：使用 mpg 資料集，繪製燃料和不同驅動類型的條狀圖\n``{r}\nggplot(data = mpg, mapping = aes(fl, fill = drv)) +\n    geom_bar()\n預設會用疊加的方式繪製：\n\n如果加上分散排列，如下面語法：\n``{r} ggplot(data = mpg, mapping = aes(fl, fill = drv)) + geom_bar(position = ‘dodge’)\n\n則會呈現下列圖形：\n\n![](https://i.imgur.com/XHsza95.png)\n\n\n若使用填滿(fill)的方式，就會和堆疊很類似，只不過填滿的每個條狀都會等長，如下列的語法：\n``{r}\nggplot(data = mpg, mapping = aes(fl, fill = drv)) +\n    geom_bar(position = 'fill')\n\n\n\n\n有時候在繪圖的時候，我們會在圖上面加註誤差棒，以了解數據的誤差範圍。若誤差棒的長度愈長，代表其誤差愈大。誤差棒的長度一般是標準差(standard deviation)或標準誤(standard error)。ggplot2 可使用 geom_errorbar(), geom_linerange(), geom_pointrange() 或 geom_crossbar() 等。\n下面我們以澎湖南方四島資料集 作為範例來繪製不同土壤性質平均的條型圖加上誤差棒。因為要計算不同土壤性質的平均、標準誤，我們使用 tidyverse 宇宙中的 dplyr 套件之工具來篩選和聚集資料(select, gather, group_by, summarise 等)，計算完每個不同土壤性質的平均和標準誤之後，再使用 ggplot2 來繪圖。詳細繪製的語法如下：\n``{r} library(tidyverse) library(ggplot2)\nsisland.env_summary <- sisland.env %>% # 選擇目標欄位：島嶼(island)、土壤有機質(SOM)、pH、鎂離子(Mg)、 # 鈉離子(Na), 岩石地比例(rock_ratio) select(island, SOM, pH, Mg, Na, rock_ratio) %>% # 將寬表轉成長表，但排除島嶼。聚集後的索引(key，也就是土壤性質， # 像是SOM, pH 等)重新命名為 soil_properties # 數值(value)重新命名為 measurements gather(key = ‘soil_properties’, value = ‘measurements’, -island) %>% # 以島嶼和土壤性質作為群組 group_by(island, soil_properties) %>% # 使用 summarise 來計算平均和標準誤 summarise(mean = mean(measurements), se = sd(measurements) / length(measurements)) # 使用 ggplot2 繪圖 ggplot(data = sisland.env_summary, mapping = aes(x= soil_properties, y = mean, fill = island)) + # 手動填色 scale_fill_brewer(palette = ‘Pastel1’) + # 使用 geom_bar() 繪製條型圖 geom_bar(stat = ‘identity’, position = ‘dodge’) + # 加上誤差棒 geom_errorbar，使用平均數加減一個標準誤 geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.3, position = position_dodge(0.9))\n\n繪製出圖結果如下：\n![](https://i.imgur.com/f1rD4w4.png)\n\n### 1.9 多圖排列(facet)\n\n這裡的多圖排列(facet)指的是把一張圖依照不同的離散變數來切分成數個子圖。另外一個把多個不同小圖組成一個完整大圖，請參見 1.7 節小圖。以 mpg 資料集來說，若我們要依照不同的汽缸數(cyl 欄位)來分別看發動機排氣量(displ)和市區油耗(cty)，我們可以使用 ``facet_grid()`` 來依據汽缸數來切成小圖：\n\n![](https://i.imgur.com/wO58VTd.png)\n圖9、不同汽缸車輛的發動機排氣量和高速油耗比較圖\n\nggplot2 語法為：\n``{r}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + \n  geom_point() +\n  facet_grid(cols = vars(cyl))\n其中 facet_grid() 裡頭可以依照 cols (欄)或 rows (列) 來排列。不管是欄或列都要放 vars(離散的變數)。也可以同時加入兩種不同的離散變數來排列，例如不同汽缸數(以欄來排列)和不同燃料(以列來排列)來做比較： ``{r} ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() + facet_grid(rows = vars(fl), cols = vars(cyl))\n產製出來的圖如下圖：\n\n![](https://i.imgur.com/FQhBdWH.png)\n圖10、facet_grid 範例，以燃料(fl)和汽缸數(cyl)類型來做為小圖單元顯示發動機排氣量和高速油耗的比較組圖\n\n註：4,5,6,8 代表汽缸數，c, d, e, p, r 分別代表是燃料或動力類型，c = CNS (compressed natural gas 壓縮天然氣), d = diesel (柴油), e = electricity (電力), p = premium (高級汽油，類似我們的 92 無鉛汽油，辛烷值約在91以上)，r = regular (一般汽油，辛烷值通常約 87)\n\n### 1.10 小圖組成大圖\n\n若要把許多張不同的小圖組合成一張大圖，可以透過 [ggpubr](https://cran.r-project.org/package=ggpubr) 和 [gridExtra](https://cran.r-project.org/package=gridExtra) 等套件來實作。本節將使用 ggpubr 的 ``ggarrange()`` 來組合小圖。組合的步驟分為兩部分，第一個是使用 ``ggplot2`` 來產生圖，接下來再使用 ``ggarrange()``  來組合。\n\n若我們有四張圖要組合起來，我們可以使用下列的語法：\n``{r}\n# 1. 先建立個別四張圖\ng1 <- ggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, color = class)) +\n  labs(title = 'theme_bw') +\n  theme_bw()\ng2 <- ggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = cty, color = class)) +\n  labs(title = 'theme_gray') +\n  theme_gray()\ng3 <- ggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, color = class)) +\n  labs(title = 'theme_classic') +\n  theme_classic()\ng4 <- ggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = cty, color = class)) +\n  labs(title = 'theme_linedraw') +\n  theme_linedraw()\n# 2. 使用 ggpubr 的 ggarrange() 來組合\nlibrary(ggpubr)\ng_all <- ggarrange(g1, g2, g3, g4)\ng_all\n\n但上面的圖如果要放在報告中，會出現以下的問題 1. 重複顯示圖例 2. 沒有小圖的編號，若文章內容要引用就不知道指的是哪張小圖\n所以我們可以加上 common.legend = TRUE 和 labels = c('(a)', '(b)', '(c)', '(d)') 來修正：\n``{r} g_all <- ggarrange(g1, g2, g3, g4, labels = c(‘(a)’, ‘(b)’, ‘(c)’, ‘(d)’), font.label = list(size = 10), common.legend = TRUE, legend=“bottom”) g_all\n\n修正後的圖如下：\n\n![](https://i.imgur.com/jWlNPrC.png)\n\n### 1.11 儲存與輸出\n\n輸出圖片除了使用 RStudio 本身的介面來儲存外，可以直接使用``ggsave()``來儲存圖片為不同的格式和大小，``ggsave()``支援輸出 png, pdf, jpg 等不同格式，也能夠設定 dpi 和圖片長寬等資訊。一般的輸出語法為：\n\n``{r}\n# 將 1.7 節的 g_all 儲存成 g_all.png，並設定 dpi 為 300\nggsave(g_all, filename = 'g_all.png', dpi = 300)\n但若圖片中有多位元的文字，在部分作業系統可能會無法顯示，這時候可以使用 Cairo 套件，輸出的時候繪圖裝置要選擇 cairo_pdf() 或是其他 Cairo 支援的裝置。或是使用 showtext 套件，使用的語法如下：\n``{r} library(showtext) showtext_auto() # Not RUN g1 <- ggplot(…) ggsave(g1, filename = ‘g1.png’) ```"
  },
  {
    "objectID": "R_ggplot2_intro.html#參考文獻與延伸閱讀",
    "href": "R_ggplot2_intro.html#參考文獻與延伸閱讀",
    "title": "16  ggplot2 繪圖簡介",
    "section": "2 參考文獻與延伸閱讀",
    "text": "2 參考文獻與延伸閱讀\nWickham, H. (2009) ggplot2: Elegant Graphics for Data Analysis. 2nd Edition, Springer, New York. https://doi.org/10.1007/978-0-387-98141-3`"
  },
  {
    "objectID": "R_ggplot2_advance.html",
    "href": "R_ggplot2_advance.html",
    "title": "17  ggplot2 繪圖各論",
    "section": "",
    "text": "在決定採用何種圖之前，必須要了解資料的變數屬性，像是有幾個變數需要呈現、資料類型屬於連續變數(continuous variables)或是離散變數(discrete variables)。連續性的變數像是溫度、雨量、濕度等環境因子；離散性的變數則像是性別(雌、雄)、地形位置(稜線、上坡、中坡、下坡、谷地等)等。如果是單一連續變數，可以用直方圖(histogram)、多邊圖(frequency polygon plot)、點圖(dot plot)、面積圖(area map)或分位圖(quantile-quantile plot)等來繪製，呈現的方式則多以該變數數值出現的頻度(也就是次數)或是核密度估計(kernel density estimate)來呈現。下表1 列出常用的圖形與所需之變數數目、類型與 ggplot2 幾何元件之整理：\n表1. 常用的圖形、變數數目、變數類型與 ggplot2 幾何元件比較\n\n\n\n變數數目\n變數類型\n圖形類型\nggplot2 幾何元件(geom_functions)\n解釋與適用資料\n\n\n\n\n1\n連續\n直方圖\ngeom_histogram()\n觀察數據分布的大致情況，應用在連續性的數值上\n\n\n1\n連續\n多邊圖\ngeom_freqpoly()\n觀察數據分布的大致情況，和直方圖很類似，只不過繪製成折線，適合疊加多個變數後比較\n\n\n1\n連續\n點圖\ngeom_dotplot()\n觀察數據分布的大致情況，和直方圖很類似，只不過以點來呈現\n\n\n1\n連續\n核密度估計圖\ngeom_density()\n觀察數據分布的大致情況，將直方圖轉換成折線方式呈現，使用機率密度的函數來計算繪製\n\n\n1\n連續\n分位圖\ngeom_qq(), geom_qq_line()\n適用於檢測數據分布是否常態\n\n\n1\n連續\n盒鬚圖\ngeom_boxplot()\n了解資料的分散狀況，可從盒鬚圖中觀察出中位數、四分位數和最大最小值\n\n\n1\n離散\n柱狀圖/長條圖\ngeom_bar()\n比較一個變量小規模的數據分析，適用於離散型資料\n\n\n2\n連續\n散佈圖\ngeom_point()\n將兩個變數以點呈現，可協助了解兩者之間有無關聯，可搭配 geom_smooth()\n\n\n2\n連續\n面積圖\ngeom_area()\n\n\n\n2\n連續\n折線圖\ngeom_line()\n連續性的資料，把所有的點用線段連結起來，觀察x軸的變數序列上y的變化情形\n\n\n2\n連續\n鬚軸圖\ngeom_rug()\n在兩個軸上精簡表示兩個連續變數的圖，通常適合小資料集。\n\n\n2\n連續\n平滑曲線圖\ngeom_smooth()\n把所有的資料平滑化後繪製，一般協助觀察並找出資料的特徵\n\n\n2\n連續+離散\n柱狀圖\ngeom_col()\n\n\n\n2\n連續+離散\n盒鬚圖\ngeom_boxplot()\n了解資料的分散狀況，可從盒鬚圖中觀察出中位數、四分位數和最大最小值\n\n\n2\n連續+離散\n提琴圖\ngeom_violin()\n同時顯示數據分布和其機率密度，結合盒鬚圖和核密度估計圖\n\n\n3\n連續\n等高線圖\ngeom_contour(), geom_contour_fill()\nGIS 地形高度資料\n\n\n3\n連續\n影像網格(raster)\ngeom_raster()\n地圖資料，和 geom_tile() 與 geom_rect() 相同，當所有的圖磚大小相同時，繪製地圖的效率較 geom_tile() 或 geom_rect() 來得高\n\n\n3\n連續\n圖磚\ngeom_tile() , geom_rect()\n繪製矩形範圍，定義邊界(數值範圍四個角落, geom_rect)或圖磚大小(geom_tile)。通常使用作為地圖上或熱點圖(heatmap)的資料呈現\n\n\n\n\n\n澎湖南方四島資料集是林政道在 2015 執行海洋國家公園管理處委託研究「澎湖南方四島植物相演替分析研究」所調查的資料集。我們會使用這個資料集來練習繪圖。\n從 gist.github.com 讀取南方四島資料集的環境因子資料，我們使用 data.table::fread() 來讀取遠端的資料，R 程式碼如下：\n\nlibrary(ggplot2)\nlibrary(data.table)\nsislandEnvURL <- 'https://gist.github.com/mutolisp/93f863c0676dfca83749e011f8ef69a9/raw/9f637f5f31e49d303af98405a32d00e39e20f84f/sisland_plot_header.csv'\nsisland.env <- fread(sislandEnvURL)\n\n\n\n\nggplot2 幾何元件: geom_histogram()\n繪製語法：\n\n# 單一變數\nggplot(data = sisland.env, aes(x = SOM)) +\n    geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\naes 參數： x, y, alpha, color, fill, linetype, size, weight\n出圖：\n\n\n\n\nggplot2 幾何元件: geom_freqpoly()\n繪製語法：\n\n# 單一變數\nggplot(data = sisland.env, mapping = aes(x = SOM)) +\n    geom_freqpoly()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\naes 參數： x, y, alpha, color, fill, linetype, size, weight\n\n\n\n\nggplot2 幾何元件: geom_dotplot()\n繪製語法：\n\nggplot(data = sisland.env, mapping = aes(x = SOM)) +\n    geom_dotplot()\n\nBin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`.\n\n\n\n\n\naes 參數： x, y, alpha, color, fill, linetype, size, weight\n\n\n\n\nggplot2 幾何元件: geom_density()\n繪製語法：\n\nggplot(data = sisland.env, mapping = aes(x = SOM)) +\n    geom_density()\n\n\n\n\naes 參數： x, y, alpha, color, fill, group, linetype, size, weight\n\n\n\n\nggplot2 幾何元件: geom_qq() 及 geom_qq_line()\n繪製語法：\n\nggplot(data = sisland.env) +\n    geom_qq(mapping = aes(sample = SOM))\n\n\n\n\naes 參數： x, y, alpha, color, fill, linetype, size, weight\n\n也可以搭配 Q-Q line 來繪圖\n繪製語法：\n\nggplot(data = sisland.env) +\n    geom_qq(mapping = aes(sample = SOM)) +\n    geom_qq_line(mapping = aes(sample = SOM))\n\n\n\n\n\n\n\n\n盒鬚圖、提琴圖和區域散點圖都是來描述資料分散的情形，可以從盒鬚圖上窺知中位數、第一四分位數、第三四分位數、最大值與最小值；提琴圖則是結合密度估計圖顯示；區域散點圖則是顯示所有的點位散佈位置，但僅適於小規模的資料集(數據很大難以閱讀，點都會疊在一起)。\n\n\nggplot2 幾何元件: geom_boxplot()\n繪製語法：\n\nggplot(data = sisland.env, mapping = aes(x = SOM)) +\n    geom_boxplot()\n\n\n\n\naes 參數： x, y, alpha, color, fill, linetype, size, weight\n\n\n\n\n如果要在同一張圖中，放置多個變數，就得要先將資料處理過。我們澎湖南方四島的環境資料是屬於寬表(wide table)，要轉換成長表(long table)才能繪製。但請注意，因為是同一個 y 軸，如果資料範圍差異太大(比如說某個變數 var1 數值介於 0–1 之間，而 var2 變數則介於 \\(10^4\\) 至 \\(10^6\\) 之間，放在同一個 y 軸上，var1 會整個被壓縮成一條線)，排在同一張圖是沒什麼意義的。\n寬表的概念\n\n\n\n變數1\n變數 2\n變數 3\n變數 4\n\n\n\n\n量測值1\n量測值4\n…\n…\n\n\n量測值2\n量測值5\n…\n…\n\n\n量測值3\n量測值6\n…\n…\n\n\n…\n…\n…\n…\n\n\n\n長表的概念\n\n\n\n變數名稱\n量測值\n\n\n\n\n變數1\n量測值1\n\n\n變數1\n量測值2\n\n\n變數1\n量測值3\n\n\n變數2\n量測值4\n\n\n變數2\n量測值5\n\n\n變數2\n量測值6\n\n\n…\n…\n\n\n…\n…\n\n\n變數4\n量測值n\n\n\n\n將寬表轉換成長表可以使用 tidyverse 中 dplyr 套件的 gather() 函式，其語法如下(請複習 %>% pipeline 的用法)：\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ tibble  3.1.7     ✔ dplyr   1.0.8\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n✔ purrr   0.3.4     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::between()   masks data.table::between()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::first()     masks data.table::first()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::last()      masks data.table::last()\n✖ purrr::transpose() masks data.table::transpose()\n\nsisland.env %>% \n  select(C, Mg, Na, SOM) %>% # 將南方四島資料集 C, Mg, Na, SOM 欄位取出\n  gather(key = 'variables', value = 'measurements') %>% # 轉成長表\n  ggplot(mapping = aes(variables, measurements)) + # 繪圖\n    geom_boxplot()\n\n\n\n\n\n\n\n\n另一個常常使用的案例是把多個盒鬚圖依照不同組別來比較。舉例來說，如果我們想比較南方四島中不同島嶼樣區土壤性質(SOM、pH和 Mg)含量，我們可以這樣繪製：\n\n# 因為中文顯示有問題，所以安裝 showtext 套件\nlibrary(showtext)\n\nLoading required package: sysfonts\n\n\nLoading required package: showtextdb\n\nshowtext_auto()\nsisland.env %>%\n  select(island, SOM, pH, Mg) %>%\n  # gather 所有變數，除了 island 之外(要當成獨立一個欄位，做為群組)\n  gather(key = 'variable', value = 'measurements', -island) %>%\n  # 以 variable (土壤性質，即 SOM, pH 和 Mg)為 x, \n  # measurements 為 y\n  # 依照 island (島嶼) 使用 fill 來分組\n  ggplot(mapping = aes(x = variable, y = measurements, fill = island)) +\n    # 繪製盒鬚圖，使用 position_dodge 調整間距\n    geom_boxplot(position = position_dodge(0.9)) +\n    # 修改 x 軸標籤為 Soil properties\n    labs(x = 'Soil properties') \n\n\n\n\n\n\n\n\nggplot2 幾何元件: geom_violin()\n繪製語法：\n\nsisland.env %>%\n  select(island, SOM, pH, Mg) %>%\n  gather(key = 'variable', value = 'measurements', -island) %>%\n  ggplot(mapping = aes(x = variable, y = measurements)) +\n    geom_violin()\n\n\n\n\naes 參數： x, y, alpha, color, fill, group, linetype, size, weight\n\n\n\n\nggplot2 幾何元件: geom_jitter()\n繪製語法：\n\nsisland.env %>%\n  select(island, SOM, pH, Mg) %>%\n  gather(key = 'variable', value = 'measurements', -island) %>%\n  ggplot(mapping = aes(x = variable, y = measurements, color = island)) +\n  geom_jitter()\n\n\n\n\naes 參數： x, y, alpha, color, fill, group, linetype, size, weight"
  },
  {
    "objectID": "R_intro.html",
    "href": "R_intro.html",
    "title": "1  R 的介紹",
    "section": "",
    "text": "HackMD 協作"
  },
  {
    "objectID": "R_intro.html#本章概要",
    "href": "R_intro.html#本章概要",
    "title": "1  R 的介紹",
    "section": "1 本章概要",
    "text": "1 本章概要\n本章將會介紹 R 以及 RStudio 這個整合性開發環境"
  },
  {
    "objectID": "R_intro.html#為什麼要使用-r",
    "href": "R_intro.html#為什麼要使用-r",
    "title": "1  R 的介紹",
    "section": "2 為什麼要使用 R?",
    "text": "2 為什麼要使用 R?\n現在市面上有許多商業的專業統計軟體，例如 SAS、SPSS、Statistica等，為什麼我要介紹各位使用 R?你可能會問，我這些資料很簡單，用Microsoft Excel 做統計分析或 SPSS 按一按就好了，報表也都能漂亮地印出來，為什麼還要再多花心思去學一套新的軟體? 因為 R 是:\n\n百分之百自由軟體 (free software)，這意味著你可以自由取得、複製及散佈\n開放原始碼，R 的原始碼是公開的，你可以閱讀甚至修改\n龐大的使用者社群,因為自由軟體的特性,所以全世界有許多人貢獻他們的心力與 程式碼,所以許多新的統計方法可以很快就有 R 套件的支援\n跨平台 (cross-platform),不管你是使用 Windows, GNU/Linux, Mac OS 甚至是 FreeBSD,都可以執行 R 程式\n易於開發套件，你可以使用 C 或是 FORTRAN 語言開發延伸套件\n整合性高，可使用諸如 bash, python (rpy2) 或是 perl (RSPerl) 等語言呼叫 R 物件寫作\n高品質的圖形與表格排版輸出\n支援許多資料分析的功能，可處理大量的資料"
  },
  {
    "objectID": "R_intro.html#安裝-r",
    "href": "R_intro.html#安裝-r",
    "title": "1  R 的介紹",
    "section": "3 安裝 R",
    "text": "3 安裝 R\n在這個章節中,我不打算花太多的篇幅講 R 的安裝,都是重點提示，詳細的安裝說明請至 R 的網站上閱讀。R 的下載網址為 http://www.r-project.org 現在的 GNU/Linux 作業系統通常都會有套件管理 程式,你可以直接從該套件管理 程式安裝 R 程式，下面以 Debian/Ubuntu 的 apt 套件管理程式為例，示範如何安裝: 終端機底下安裝 R 主程式(或是你可以從圖形化的套件管理程式來安裝)\n# apt-get install r-base\n在 Windows 作業系統中安裝 R 程式只需要下載執行檔 R-版本號碼.exe, 並按照步驟安裝即可。因為 R 本身的圖形開發介面較為陽春，在這裡我們將使用 RStudio 這套整合性的開發環境來教學，請參見下節"
  },
  {
    "objectID": "R_intro.html#整合性圖形介面環境",
    "href": "R_intro.html#整合性圖形介面環境",
    "title": "1  R 的介紹",
    "section": "4 整合性圖形介面環境",
    "text": "4 整合性圖形介面環境\n雖然 R 本身是透過指令控制的，官方提供的套件也有簡單的整合性圖形介面環境可以使用，非官方的整合軟體像是 tinn-r 或是 RStudio等，我們推薦使用 RStudio來進行 R 的指令寫作、測試以及管理工作環境、安裝第三方套件等功能。\n\n4.1 RStudio 總覽\n對於常常需要使用 R 來做統計分析的人來說，RStudio是一個非常方便又強大的整合性工具。它除了基本的指令語法強化功能(syntax highlighting， 透過不同的顏色顯示函式功能、變數等，可提高程式碼的易讀性)、tab 鍵指令補齊、歷史指令控制管理、資料變數管理等功能外，也整合了版本控制系統(version control，預設使用的是 git ，需要額外安裝)、第三方套件管理、Markdown 語法、簡報投影片等。除此之外，RStudio 最重要的特徵就是它也是開放原始碼軟體，而且完全免費！\n\n安裝 RStudio\n請至 RStudio Desktop 下載安裝即可。\n建立新專案\n首先我們用專案管理的方式來建立新專案，從 RStudio 功能選單中的 Project 項目中選擇子項目的 Create Project 建立一個新的專案，如下圖:\n\n\n\n建立新專案\n\n\n接下來選擇專案類型及目錄名稱\n我們選 Empty Project\n\n\n\n專案類型\n\n\n\n選擇你想要放置這個 R 專案的目錄以及這個新專案的名稱，範例名稱為 ch1_r_project\n\n\n\n專案名稱及目錄\n\n\n\nRStudio 介面介紹\nRStudio 有個特異的功能就是提供小抄(cheat sheet)，這個非常實用，完整 RStudio 介面小抄請參見RStudio IDE Cheat Sheet，下面將會使用 RStudio 部分截圖來介紹\n\nRStudio 開啟的時候，預設切分為左右兩部分，左半部是 R script 和 R console，右半部則是 R 的後勤區(包括環境、變數、歷史指令、檔案、說明檔等)。詳細的說明請參見第二章—[[ch02_R入門基礎]]。"
  },
  {
    "objectID": "R_intro.html#faq",
    "href": "R_intro.html#faq",
    "title": "1  R 的介紹",
    "section": "5 FAQ",
    "text": "5 FAQ\n\n如果開啟 Rstudio 碰到 Fatal error 和權限有關的錯誤訊息導致無法開啟怎麼辦？\n\n先把 Rstudio 關閉，在 Windows 的開始程式列表中，在 Rtudio 上按右鍵-> 選擇更多-> 以系統管理員開啟\n\nRstudio 如果執行時碰到使用者名稱為非英文字元出現錯誤該如何解決？\n\n例：在安裝第三方套件時出現錯誤、找不到路徑等狀況，這時候請設定 TMP、R_LIBS_USR 參數。請參考Windows 中文使用者與 RStudio 環境變數調校"
  }
]