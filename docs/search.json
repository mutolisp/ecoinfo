[
  {
    "objectID": "R_database.html",
    "href": "R_database.html",
    "title": "14  讓 Rstudio 支援資料庫",
    "section": "",
    "text": "為了要在 RStudio 中能連接並使用資料庫系統，請安裝以下表 1.1 和表1.2 所需程式。建議安裝的流程如下：\n\n安裝 R 語言\n安裝 RStudio\n安裝 RPostgres, DBI 還有 odbc 等套件\n安裝 PostgreSQL\n安裝 pgAdmin\n安裝 psqlODBC\n\n表1.1 在 RStudio 使用資料庫所需要的程式\n\n\n\n\n\n\n\n\n\n\n名稱\n必要性\n說明\n網址\n授權\n\n\n\n\nR\n必須安裝\nR 語言\nhttps://www.r-project.org\nGNU General Public License v2/v3 可免費自由使用、複製、修改\n\n\nRStudio\n必須安裝\nR 的整合性開發環境(Integrated Desktop Environment; IDE)\nhttps://rstudio.com\n商業軟體授權，但是具有開源授權。社群版可免費使用，商業使用需付費\n\n\nPostgreSQL\n必須安裝\n關聯式資料庫管理系統(relational database management system)\nhttps://postgresql.org\nPostgreSQL license (免費，類似 BSD 或 MIT 的授權，可以自由使用、複製、修改甚至使用於商業用途)\n\n\npsqlODBC\n必須安裝\nPostgreSQL ODBC (Open Database Connectivity)\nhttps://odbc.postgresql.org\nLGPL (Library General Public License)\n\n\npgAdmin\n選擇性安裝，強烈建議安裝\n管理 PostgreSQL 的前端工具\nhttps://www.pgadmin.org\nPostgreSQL license (免費)\n\n\npgcli\n選擇性安裝，推薦安裝\nPython 寫的 PostgreSQL 命令列介面\nhttps://www.pgcli.com\nBSD 3-Clause license (免費)\n\n\n\n表1.2 R 所需要之套件\n\n\n\n\n\n\n\n\nR 套件\n說明\n網址\n\n\n\n\nodbc\nR ODBC 開放資料庫連結套件\nhttps://cran.r-project.org/web/packages/odbc/index.html\n\n\nDBI\nR 資料庫介面(database interface)\nhttps://cran.r-project.org/web/packages/DBI/index.html\n\n\nRPostgres\nRcpp 的 PostgreSQL 介面套件\nhttps://cran.r-project.org/web/packages/RPostgres/index.html\n\n\n\n\n\n\n\n\n可至 EnterpriseDB 下載安裝\n\n\n\n請先安裝 Homebrew 套件管理系統，再透過 brew 來安裝以下的軟體\n$ brew install postgresql unixodbc psqlodbc\n\n\n\nDocker 是一個虛擬化的軟體平台，可快速地安裝、測試與佈署應用程式。Docker 核心是 GNU/Linux，因此在許多 Linux 作業系統中都有內建。 這裡指的虛擬化(virtualization)是在作業系統層上進行，和一般人熟知的虛擬機器(virtual machine)不同。Docker 是透過「容器(container)」來實作虛擬化，而這個「容器」和早期於 Unix 作業系統上的 jail (例如 FreeBSD 的 jail)本質是相同的，都是透過 chroot 機制來隔離環境應用程式，像是沙盒(sandbox)一樣。在 jail 沒有漏洞的情況下，不論你在裡頭惡搞都不會影響到外面的作業系統。所以如果你想要測試和玩玩看 RStudio, PostgreSQL，而不是安裝在你平常工作的作業環境中，推薦使用 docker 來安裝。目前大部分常用的自由軟體或開源軟體都有支援 docker，對 docker 有興趣的可以讀這篇 docker 的基礎教學 。使用 docker 之前請先安裝 docker/docker desktop\n$ docker pull postgres\n# 或是使用 tag 來拉取您要安裝的版本\n# https://hub.docker.com/_/postgres?tab=tags\n# 例如：\n$ docker pull postgres:14.1\n\n$ docker run --name 容器名稱(例如postgres) -e POSTGRES_PASSWORD=密碼 -d postgres\n\n# 其餘設定請參閱 docker 網站\n至於類 Unix 系統，像是 *BSD, GNU/Linux 的使用者，我想你們應該不需要再多說明了吧？\n使用 Docker 安裝 R 和 RStudio (待研究)"
  },
  {
    "objectID": "R_database.html#設定",
    "href": "R_database.html#設定",
    "title": "14  讓 Rstudio 支援資料庫",
    "section": "14.2 2. 設定",
    "text": "14.2 2. 設定\n\n14.2.1 2.1 設定 odbc\n如果是在類 Unix 系統(包含 Mac)，請在家目錄下(/Users/yourAccountName) 建立 .odbcinst.ini 和 .odbc.ini\n.odbcinst.ini\n[PostgreSQL Driver]\nDriver          = /opt/homebrew/lib/psqlodbcw.so\n註：如果 MacOS 使用 homebrew，ODBC 驅動程式預設位置在 /opt/homebrew/lib 底下，其餘的作業系統可能在 /usr/local/lib 底下，請再查閱作業系統的使用手冊\n.odbc.ini\n[databaseName]\nDriver              = PostgreSQL Driver\nDatabase            = 資料庫的名稱\nServername          = localhost\nUserName            = 你的帳號\nPassword            = 你的密碼\nPort                = 5432\n\n[ecoinformatics]\nDriver              = PostgreSQL Driver\nDatabase            = ecoinformatics\nServername          = localhost\nUserName            = *ruser*\nPassword            = *r_dataScience*\nPort                = 5432\n\n\n14.2.2 2.2 設定 PostgreSQL\n連進資料庫\npgcli -d postgres\n建立使用者，並設定密碼與權限\n方法一：使用命令列方式執行\nCREATE USER ruser WITH PASSWORD 'r_dataScience';\nCREATE DATABASE ecoinformatics WITH OWNER = ruser;\n方法二：使用 pgAdmin 建立\n\n開啟 pgAdmin 並連進資料庫後，從 Login/Group Roles 中按滑鼠右鍵：Create > Login/Group Role。\n 圖 2.2.1\n設定權限，讓 ruser 可以登入並建立資料庫，即開啟 “Can login?” 和 “Create databases?”。設定完之後按 Save\n 圖 2.2.2\n建立資料庫：在左邊選單中的 Databases 按滑鼠右鍵，選擇 “Create” > “Databases..”。輸入資料庫名稱，這邊以 ecoinformatics 為範例，Owner 選擇 ruser。最後按 Save 建立資料庫。\n\n\n\n圖 2.2.3\n\n\n圖 2.2.3"
  },
  {
    "objectID": "R_database.html#在-rstudio-中使用資料庫",
    "href": "R_database.html#在-rstudio-中使用資料庫",
    "title": "14  讓 Rstudio 支援資料庫",
    "section": "14.3 3. 在 RStudio 中使用資料庫",
    "text": "14.3 3. 在 RStudio 中使用資料庫\n\n14.3.1 3.1 連接資料庫\n開啟 RStudio 後，在右上方的面板中按 New Connection 來建立資料庫連結(如下圖 3.1.1)。點選我們建立的 ecoinformatics odbc 設定\n\n\n\n圖 3.1.1 建立一筆與資料庫的連結\n\n\n\n\n\n圖 3.1.1 建立一筆與資料庫的連結\n\n\n圖 3.1.1 建立一筆與資料庫的連結\n點選完 ecoinformatics 之後，會開啟詳細參數的設定(圖3.1.2)，你可以在這裡選擇把參數丟進 R Console 或是新建一個 R Script 把指令丟出去，之後再執行指令建立一筆資料庫連結。透過 DBI 套件去連結的指令如下：\n\nlibrary(DBI)\ncon <- dbConnect(odbc::odbc(), \"ecoinformatics\", timeout = 10)\n\n上面的指令中，[dbConnect()](https://dbi.r-dbi.org/reference/dbconnect) 是 DBI 套件連接資料庫的函式，裡頭的參數需包含資料庫的驅動程式(database driver)。以本例來說，是使用 odbc::odbc() 來連接 PostgreSQL 資料庫，而 “ecoinformatics” 則是我們寫在 odbc.ini 設定檔中的參數名稱；timeout 則是等待連接時間為 10 秒，超過後無法連接則回傳錯誤訊息。\n\n\n\n圖 3.1.2 資料庫連結指令\n\n\n圖 3.1.2 資料庫連結指令\n若成功連接的話，就能夠看到正確顯示範例資料庫 ecoinformatics 的畫面\n\n\n\n圖 3.1.3 成功連接資料庫的畫面\n\n\n圖 3.1.3 成功連接資料庫的畫面\n\n\n14.3.2 3.2 建立資料表(Table)\n當連進資料庫時，裡頭是空的狀態。所以我們可以透過 DBI 套件的 dbCreateTable() 來新建資料表。以下用 R 內建的 iris 資料集，使用 dbCreateTable(連線的物件, 資料表, R裡頭的資料框架) 來建立一個資料表。\nlibrary(DBI)\n# 建立資料庫連線，目標資料庫為 PostgreSQL 的 ecoinformatics\ncon <- dbConnect(odbc::odbc(), \"ecoinformatics\", timeout = 10)\n# 建立資料表，請注意以下第二個參數要使用 \" (雙引號)\ndbCreateTable(con, \"iris\", iris)\n但這樣的只是單純建立資料表，並不會把資料匯入 iris 資料表中，若要匯入資料，請使用 dbWriteTable()。\n\n\n\n\n\n\n資料庫知識\n\n\n\n一般的關聯式資料庫，儲存資料的單元是資料表(table)，和試算表(spreadsheet)很類似，都是二維的結構，由欄(columns，直向)和列(rows，橫向；又稱做紀錄[records])所組成。對於 LibreOffice Scalc 或 Microsoft Excel 的試算表來說，列是有順序的(也就是由 1, 2, 3, …)，但資料庫中的資料表的列並無一定順序，可以透過 SQL 查詢依照某特定欄位來排序；而欄則是變數(variables)，例如一個圖書館資料庫中，會儲存書目、ISBN、作者，在資料庫管理系統中則會存在欄位中。在建立資料表的時和試算表不同的是，一般的關聯式資料庫中的資料表需要有嚴謹的資料類型(data definition)定義，比如說「書目」儲存的是文字格式，那我們就要告訴資料庫要用哪種類型的文字格式以及所需的儲存資料長度。以 postgres 來說，文字相關的資料類型就有 character (可縮寫為 char)、character varying (縮寫為 varchar) 和 text。這三種的差別在於儲存的文字是否可變長度或固定長度，還有儲存長度若比固定長度短，是否會填充空格等差別。\n在儲存資料表時，通常會用「資料定義語言(data definition language; DDL) 」來定義資料類型、長度、限制(constraints，常見的像是主鍵索引限制[primary key constraint]、外部索引鍵限制[foreign key constraint])、視觀表(view)等。以下是一個簡單的 DDL：\n-- For any line beginning with \"--\" means comment\nCREATE TABLE IF NOT EXISTS iris (\n    \"Sepal.Length\" double precision,\n    \"Sepal.Width\" double precision,\n    \"Petal.Length\" double precision,\n    \"Petal.Width\" double precision,\n    \"Species\" varchar\n);\n上面這個 DDL 中，用白話翻譯就是：如果資料表 iris 不存在的話，就建立一個資料表；此資料表中有五個欄位，分別是 “Sepal.Length” (資料類型是雙精確數[double precision]，簡單說就是小數)、 “Sepal.Width”(雙精確數)、”Petal.Length” (雙精確數)、”Petal.Width” (雙精確數)和 “Species” (可變長度的文字)。這樣的語法我們也稱作「結構化查詢語言(structural query language; SQL)」，詳細 SQL 介紹請參見\n[結構化查詢語言]\n\n\n\n\n14.3.3 查詢資料表\n在這個章節中，我們將練習使用 rgbif 來擷取 GBIF 網站上的資料集，並存進 PostgreSQL 的資料庫中，最後再透過 dbGetQuery() 來查詢資料。 請先安裝好 rgbif, leaflet 和 tidyverse 這三個套件\nrgbif 可以使用 occ_search() 來搜尋物種，\n\nlibrary(rgbif)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.5     ✔ purrr   0.3.4\n✔ tibble  3.1.7     ✔ dplyr   1.0.8\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(leaflet)\n\n# 使用 occ_search 來搜尋物種\nquery_results <- occ_search(scientificName = 'Abies kawakamii',\n           hasCoordinate = TRUE,\n           limit = 100000)\n\n\n\n14.3.4 參考資料\n\nhttps://db.rstudio.com/\nhttps://www.postgresql.org/docs/14/tutorial-install.html\nhttps://hub.docker.com/_/postgres"
  }
]